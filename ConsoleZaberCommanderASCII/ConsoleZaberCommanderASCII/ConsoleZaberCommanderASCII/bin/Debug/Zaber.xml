<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zaber</name>
    </assembly>
    <members>
        <member name="T:Zaber.ConversionMap">
            <summary>
            A collection of conversion tables to use when converting units of 
            measure.
            </summary>
        </member>
        <member name="M:Zaber.ConversionMap.Add(Zaber.MotionType,Zaber.MeasurementType,Zaber.ConversionTable)">
            <summary>
            Add an entry to the map showing which conversion table to use for a 
            combination of motion and measurement types.
            </summary>
            <param name="motionType">The type of motion represented.</param>
            <param name="measurementType">The type of measurement represented.
            </param>
            <param name="table">The conversion table to use for the given
            types of motion and measurement.</param>
        </member>
        <member name="M:Zaber.ConversionMap.Find(Zaber.MotionType,Zaber.MeasurementType)">
            <summary>
            Find the conversion table to use for a combination of motion and 
            measurement types.
            </summary>
            <param name="motionType">The type of motion to find.</param>
            <param name="measurementType">The type of measurement to fine.
            </param>
            <returns>The conversion table </returns>
        </member>
        <member name="M:Zaber.ConversionMap.Find(Zaber.UnitOfMeasure)">
            <summary>
            Find the conversion table that contains a specific unit of measure.
            </summary>
            <param name="unit">The unit of measure to find.</param>
            <returns>The conversion table </returns>
        </member>
        <member name="T:Zaber.DeviceFaultException">
            <summary>
            Exception thrown by a <see cref="T:Zaber.Conversation"/> when the response has
            a fault flag.
            </summary>
        </member>
        <member name="M:Zaber.DeviceFaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.DeviceFaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.DeviceFaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.DeviceFaultException.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="response">The response that caused the exception</param>
        </member>
        <member name="P:Zaber.DeviceFaultException.Response">
            <summary>
            The response message from the device.
            </summary>
        </member>
        <member name="M:Zaber.DeviceFaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.FirmwareDownload.BaseNCodec">
            <summary>
            Implements Base-64, Base-32 and Base-16 encoding and decoding of binary data, as
            described in RFC 4648: http://tools.ietf.org/html/rfc4648
            Selection of the encoding is determined by which alphabet is used; the alphabet
            size must be 65 for Base-64, 33 for Base-32, or 16 for Base-16 (which doesn't require
            padding, hence no extra padding character).
            </summary>
            <comments>
            Only encoding is currently implemented, as we haven't had a need for decoding yet.
            </comments>
        </member>
        <member name="F:Zaber.FirmwareDownload.BaseNCodec.BASE_64_STANDARD">
            <summary>
            The default Base-64 alphabet as described in the RFC.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareDownload.BaseNCodec.BASE_64_URLSAFE">
            <summary>
            URL- and filename-safe Base-64 alphabet from the RFC.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareDownload.BaseNCodec.BASE_32_STANDARD">
            <summary>
            The default Base-32 alphabet from the RFC.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareDownload.BaseNCodec.BASE_32_EXTENDED_HEX">
            <summary>
            A Base-32 alphabet based on extending hexadecimal notation, as described in the RFC.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareDownload.BaseNCodec.BASE_16_STANDARD">
            <summary>
            Normal hexadecimal encoding for Base-16.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.BaseNCodec.Encode(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Encode binary data into a string. This function will attempt to autodetect the number of bits
            per output character from the alphabet size, and can handle 1, 2, 3, 4, 5, 6 or 7 bits at a time.
            Non-power-of-two bit sizes require a padding character, and thus an odd-sized alphabet.
            Padding characters are added to achieve a standard quantum, which is the least common multiple
            of 8 and the number of encoding bits.
            This implementation does not output linefeeds.
            </summary>
            <param name="aData">Buffer containing the data to encode.</param>
            <param name="aStartIndex">Index of the first byte to encode from the buffer.</param>
            <param name="aLength">Number of bytes to encode from the buffer.</param>
            <param name="aAlphabet">Encoding alphabet to use.</param>
            <returns>A string representing the binary data encoded with the given alphabet.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The start index and length arguments specify a range that
            is outside of the bounds of the input data buffer.</exception>
            <exception cref="T:System.ArgumentNullException">The input data buffer or alphabet string is null.</exception>
            <exception cref="T:System.InvalidOperationException">The alphabet size is inappropriate.</exception>
        </member>
        <member name="T:Zaber.FirmwareDownload.BitStreamReader">
            <summary>
            Helper to read odd numbers of bits from a stream of bytes. Up to 64 bits can be
            read at a time. The most significant bit of the first byte of input becomes the first
            bit read, which becomes the most significant bit of whatever size is read. The least
            significant bit of the first input byte is the 8th bit read, and the MSB of the second
            byte is the 9th bit, and so on.
            If the end of the input is reached, the last remaining input bits will become the most
            significant bits of the last output, and the remainder of the output will be zeroed.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.BitStreamReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initialize a new BitStreamReader to read from a given memory buffer.
            </summary>
            <param name="aBuffer">The boffer to read from.</param>
            <param name="aStartIndex">Index of the first byte to read in the buffer.</param>
            <param name="aLength">Number of bytes to read from the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The inputs describe a sequence of bytes 
            	outside the bounds of the buffer.</exception>
            <exception cref="T:System.ArgumentNullException">The input buffer is null.</exception>
        </member>
        <member name="M:Zaber.FirmwareDownload.BitStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new BitStreamReader to read from an existing stream.
            </summary>
            <param name="aInput">The stream to read from.</param>
            <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
        </member>
        <member name="M:Zaber.FirmwareDownload.BitStreamReader.Dispose">
            <summary>
            Dispose of resources held by this class instance, if any.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.BitStreamReader.ReadBits(System.Int32)">
            <summary>
            Read some bits from the input.
            </summary>
            <param name="aCount">Number of bits to read. Legal range is 1 to 64.</param>
            <returns>A 64-bit value containing the desired bits at the low end, with the first bit read
            	as the most significant of those and the last bit read as the LSB. If the end of the input
            	data is reached, further output is all zero bits.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The count input has an illegal value.</exception>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareFileUnpacker">
            <summary>
            Decodes a firmware file, including checking the header validity.
            It must be possible to determine the total length of the file; if that is not
            the case then you probably don't want the header checking, and should use the
            stream decoder instead.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareFileUnpacker.Unpack(System.String,System.UInt32,System.UInt32,Zaber.FirmwareDownload.FirmwareUnpacker.ProgressReportCallback)">
            <summary>
            Opens a file on disk and extracts one piece of firmware. The file must be readable to the current user
            and not opened for writing by another program.
            </summary>
            <param name="aFilename">Path to the file. Can be absolute or relative to the current working directory.</param>
            <param name="aPlatform">The platform ID of the device being upgraded. Retrieved from the system.platform setting.</param>
            <param name="aSerial">The serial number of the device being upgraded. Retrieved from the system.serial setting.</param>
            <param name="aProgressCallback">(Optional) callback for decode progress reporting.</param>
            <returns>The new (possibly encrypted) firmware image for the device.</returns>
            <exception cref="!:ArgumentException">The filename contains invalid characters.</exception>
            <exception cref="!:ArgumentNullException">The filename string is null.</exception>
            <exception cref="T:System.IO.PathTooLongException">The filename is too long (more than 248 chararcters in the folder name
            	or more than 260 in the file name).</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory part of the filename path does not exist.</exception>
            <exception cref="T:System.IO.IOException">There was an error opening the file.</exception>
            <exception cref="!:UnauthorizedAccessException">The path does not refer to a file, or you do not have read permission for that file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist</exception>
            <exception cref="!:NotSupportedException">The path is in an invalid format.</exception>
            <exception cref="T:System.IO.InvalidDataException">The file header is incorrect or the file is otherwise corrupted.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The unpacker attempted to read past the end of the input stream.</exception>
            <exception cref="!:Zaber.Bootloader.Plugin.FirmwareUnpackException">Decoding the data produced a message instead of a result.</exception>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareFileUnpacker.Unpack(System.IO.Stream,System.UInt32,System.UInt32,Zaber.FirmwareDownload.FirmwareUnpacker.ProgressReportCallback)">
            <summary>
            Extracts one piece of firmware from a data strea. This assumes the stream is a file and will
            check the validity of the header.
            </summary>
            <param name="aFilename">Path to the file. Can be absolute or relative to the current working directory.</param>
            <param name="aPlatform">The platform ID of the device being upgraded. Retrieved from the system.platform setting.</param>
            <param name="aSerial">The serial number of the device being upgraded. Retrieved from the system.serial setting.</param>
            <param name="aProgressCallback">(Optional) callback for decode progress reporting.</param>
            <returns>The new (possibly encrypted) firmware image for the device.</returns>
            <exception cref="!:ArgumentNullException">The stream is null.</exception>
            <exception cref="T:System.IO.InvalidDataException">The file header is incorrect or the file is otherwise corrupted.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The unpacker attempted to read past the end of the input stream.</exception>
            <exception cref="!:Zaber.Bootloader.Plugin.FirmwareUnpackException">Decoding the data produced a message instead of a result.</exception>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareUnpacker">
            <summary>
            This class can be used to extract one piece of firmware from a firmware data stream. It does not
            check file headers and expects them to have already been skipped, so can be used for firmware 
            transmitted from any binary data source.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareUnpacker.ProgressReportCallback">
            <summary>
            Type for progress report callback events.
            </summary>
            <param name="aCurrentProgress">Current progress value, starting at zero for no work done.</param>
            <param name="aMaximum">Maximum progress value that aCurrentProgress can reach. (Might not actually 
            	be that value when the work is completed though.)</param>
        </member>
        <member name="E:Zaber.FirmwareDownload.FirmwareUnpacker.ProgressReported">
            <summary>
            Hook into this event to receive decode progress reports.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpacker.Unpack(System.IO.Stream,System.UInt32,System.UInt32,Zaber.FirmwareDownload.FirmwareUnpacker.ProgressReportCallback)">
            <summary>
            Static helper method to extract one piece of firmware from a stream.
            </summary>
            <param name="aStream">The byte stream to extract from.</param>
            <param name="aPlatform">The target platform for the firmware (from the system.platform setting on the device).</param>
            <param name="aSerial">The serial number of the device (from the system.serial setting).</param>
            <param name="aProgressCallback">(Optional) callback for decode progress reporting.</param>
            <returns>A byte array containing the firmware image for the device.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
            <exception cref="T:System.NotSupportedException">The stream type does not support reading.</exception>
            <exception cref="T:System.IO.InvalidDataException">The data is corrupted.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The unpacker attempted to read past the end of the input stream.</exception>
            <exception cref="!:Zaber.Bootloader.Plugin.FirmwareUnpackException">The extract operation failed, for example 
            	because the stream does not contain the correct firmware for your device.</exception>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpacker.#ctor(System.IO.Stream,System.UInt32,System.UInt32)">
            <summary>
            Instantiate a firmware unpacker instance.
            </summary>
            <param name="aStream">The byte stream to extract from. This class does not assume ownership of the stream
            	and the caller is responsible for closing and disposing it after the extractor is finished.</param>
            <param name="aPlatform">The target platform for the firmware (from the system.platform setting on the device).</param>
            <param name="aSerial">The serial number of the device (from the system.serial setting).</param>
            <exception cref="T:System.ArgumentNullException">The stream is null.</exception>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpacker.Unpack">
            <summary>
            Extract one piece of firmware from the stream.
            </summary>
            <comments>Side effect: The input stream read pointer is affected and generally left at the end of the stream.
            	You cannot call this twice on the same instance and expect valid results the second time.</comments>
            <returns>A byte array containing the firmware image for the device.</returns>
            <exception cref="T:System.ObjectDisposedException">The stream has already been disposed.</exception>
            <exception cref="T:System.NotSupportedException">The stream type does not support reading.</exception>
            <exception cref="T:System.IO.InvalidDataException">The data is corrupted.</exception>
            <exception cref="T:System.IO.EndOfStreamException">The unpacker attempted to read past the end of the input stream.</exception>
            <exception cref="!:Zaber.Bootloader.Plugin.FirmwareUnpackException">The extract operation failed, for example 
            	because the stream does not contain the correct firmware for your device.</exception>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareUnpackException">
            <summary>
            Conveys messages output by the firmware file decoder as a result of decoding. 
            These are not the result of decoding errors, but rather messages that the decoder
            outputs in place of a firmware image, for example because the file does not
            contain the right firmware for your device.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpackException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one.</param>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareUnpackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder">
            <summary>
            Helper class for programs that wish to be able to download firmware updates for devices.
            Provides classes mirroring the varions Json query and response data structures, and
            serialization to and from Json strings.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier">
            <summary>
            Basic device identification information for a firmware download query.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier.PlatformID">
            <summary>
            The device's platform ID, returned by the "get system.platform" command.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier.SerialNumber">
            <summary>
            The device's serial number, returned by the "get system.serial" command.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier.DeviceNumber">
            <summary>
            The device's current device number in the chain. This is used to associate the
            response data with devices in list-versions query responses. It is not used
            in download requests.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier.IsKeyed">
            <summary>
            Indicated whether or not the device requires a keyed (encrypted) firmware
            image.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryFirmwareVersion">
            <summary>
            Additional query data needed to request a download.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryFirmwareVersion.FWVersion">
            <summary>
            The requested firmware version, eg "6.18"
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryFirmwareVersion.BuildNumber">
            <summary>
            The requested build number.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Query">
            <summary>
            Base class for firmware web queries.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Query.QueryType">
            <summary>
            The type of query being made. This is populated automatically.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Query.ProtocolVersion">
            <summary>
            Tells the server which version of the query protocol we're using.
            Currently only one version exists, but this will let future versions
            of the server identify old clients.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryServerInfo">
            <summary>
            Query data type for requesting server configuration info. Currently
            only used by tests but will be used by programs in future if the
            query formats change significantly.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryListVersions">
            <summary>
            Data type for a list-versions query.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryListVersions.Devices">
            <summary>
            List of devices to find available versions for. Populate this with one or
            more <cref>QueryDeviceIdentifier</cref> instances.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDownloadVersions">
            <summary>
            Data type for a download request.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDownloadVersions.Versions">
            <summary>
            List of firmware images to package into the downloaded file. Populate this
            with one or more <cref>QueryVersionRequest</cref> instances.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryReportInstall">
            <summary>
            Data type for an installation report.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryReportInstall.Devices">
            <summary>
            List of firmware versions that have been installed on user's devices.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ResponseFWVersion">
            <summary>
            Data type for an available firmware image.  These are returned in a 
            <cref>Response</cref> after a list-versions query.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ResponseFWVersion.FWVersion">
            <summary>
            The firmware version, eg "6.18"
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ResponseFWVersion.Notes">
            <summary>
            The release notes, if any were available.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ResponseFWVersion.Build">
            <summary>
            The build number.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ResponseFWVersion.ToString">
            <summary>
            Helper for displaying version info.
            </summary>
            <returns>A human-readable string naming the firmware version and build number.</returns>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Response">
            <summary>
            Base type for query responses from the web server.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Response.Success">
            <summary>
            Indication of whether the last request succeeded or failed.
            All JSON responses should have this value set.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.Response.Message">
            <summary>
            Human-readable message from the web server, if any.
            All responses with Success = false should have this set.
            </summary>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.VersionListResponse">
            <summary>
            This is used for list-versions
            query responses and error responses, but not for actual firmware package downloads which
            come through as a binary stream.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.VersionListResponse.Versions">
            <summary>
            List of available firmware images matching the last list-versions query, if the
            last query was list-versions and there were no errors. Keys are the device numbers from
            the list-versions query. Unfortunately the key type has to be string instead of uint
            because of restrictions of the Json serializer.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.VersionListResponse.GetVersions(System.Byte)">
            <summary>
            Helper to get the firmware versions for a particular device number.
            </summary>
            <param name="aDeviceNumber"></param>
            <returns></returns>
        </member>
        <member name="T:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ServerInfoResponse">
            <summary>
            Response to the server settings query.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ServerInfoResponse.ProtocolVersion">
            <summary>
            Client-server protocol version. Currently this must always be 1.
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ServerInfoResponse.Debug">
            <summary>
            Is the server in debug mode?
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ServerInfoResponse.Live">
            <summary>
            Is the server using a live database?
            </summary>
        </member>
        <member name="P:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.ServerInfoResponse.PublicRequest">
            <summary>
            True if the server thinks you are not an internal Zaber user.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.MakeServerInfoQuery">
            <summary>
            Generate the JSON query string for a server info request.
            </summary>
            <returns>A JSON-encoded string containing the query data. The caller is responsible for encoding 
            this string in a matter appropriate for communication with the firmware server.</returns>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.MakeListVersionsQuery(System.Collections.Generic.IEnumerable{Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryDeviceIdentifier})">
            <summary>
            Encode a list-versions request from data structure to URL-safe string. 
            </summary>
            <param name="aDeviceList">A list of one or more fully populated <cref>QueryDeviceIdentifier</cref> instances.</param>
            <returns>A JSON-encoded string containing the query data. The caller is responsible for encoding 
            this string in a matter appropriate for communication with the firmware server.</returns>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.MakePackageRequest(System.Collections.Generic.IEnumerable{Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryFirmwareVersion})">
            <summary>
            Encode a firmware download request from data structure to URL-safe string.
            </summary>
            <param name="aDeviceList">A list of one or more populated <cref>QueryVersionRequest</cref> instances. 
            	The DeviceNumber field is ignored for this request.</param>
            <returns>A JSON-encoded string containing the query data. The caller is responsible for encoding 
            this string in a matter appropriate for communication with the firmware server.</returns>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.MakeInstallationReport(System.Collections.Generic.IEnumerable{Zaber.FirmwareDownload.FirmwareWebQueryBuilder.QueryFirmwareVersion})">
            <summary>
            Generate a report about which firmware versions have been installed on which
            devices.
            </summary>
            <param name="aDeviceList">A list of one or more populated <cref>QueryFirmwareVersion</cref> instances. 
            	The DeviceNumber field is ignored for this request.</param>
            <returns>A JSON-encoded string containing the query data. The caller is responsible for encoding 
            this string in a matter appropriate for communication with the firmware server.</returns>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.DecodeResponse``1(System.IO.Stream)">
            <summary>
            Convert a Json response string from the web server into a <cref>Response</cref> subclass, enabling
            easier programmatic retrieval of firmware version info or server-side error messages.
            Will throw exceptions if the string cannot be decoded to the specified type.
            </summary>
            <param name="T">The type of response expected.</param>
            <param name="aResponse">The body of a web response, as a stream.</param>
            <returns>A T instance populated with server response data.</returns>
        </member>
        <member name="M:Zaber.FirmwareDownload.FirmwareWebQueryBuilder.DecodeResponse``1(System.String)">
            <summary>
            Convert a Json response string from the web server into a <cref>Response</cref> subclass, enabling
            easier programmatic retrieval of firmware version info or server-side error messages.
            Will throw exceptions if the string cannot be decoded to the specified type.
            </summary>
            <param name="T">The type of response expected.</param>
            <param name="aResponse">The body of a web response, as a string.</param>
            <returns>A T instance populated with server response data.</returns>
        </member>
        <member name="T:Zaber.FirmwareVersion">
            <summary>
            A struct to represent the firmware version present on a device.
            </summary>
            <remarks>Previously, firmware version was stored as a 3-digit integer,
            with the first digit (the "100's digit") representing the major version,
            and the following two digits representing the minor version. This
            matched the way Zaber's firmware reported its firmware version. For this
            reason, operator overloads are provided for comparing this struct to 
            integers. Note that when comparing to integers, build number is ignored.
            </remarks>
        </member>
        <member name="F:Zaber.FirmwareVersion.Major">
            <summary>
            The major version of the firmware.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareVersion.Minor">
            <summary>
            The minor version of the firmware.
            </summary>
        </member>
        <member name="F:Zaber.FirmwareVersion.Build">
            <summary>
            The build number of the firmware, if applicable.
            </summary>
        </member>
        <member name="M:Zaber.FirmwareVersion.#ctor(System.Int32)">
            <summary>
            Create a new FirmwareVersion from a 3-digit integer, 
            as provided by firmware.
            </summary>
            <param name="version">The version number, as a single integer
            like "617" for version 6.17.</param>
            <remarks>The build number will be set to 0, indicating that no
            build number is present.</remarks>
        </member>
        <member name="M:Zaber.FirmwareVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new FirmwareVersion with no build number.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <remarks>The build number will be set to 0, indicating that no
            build number is present.</remarks>
        </member>
        <member name="M:Zaber.FirmwareVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new FirmwareVersion, specifying a full build number.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="build">The build number.</param>
        </member>
        <member name="M:Zaber.FirmwareVersion.Equals(System.Object)">
            <summary>
            Whether this object is equal to another one.
            </summary>
            <param name="obj">The object to compare this object to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
            <remarks>Unlike the == operator, this method cannot be used to
            compare FirmwareVersion objects with integers. A comparison with an
            integer will always return false.</remarks>
        </member>
        <member name="M:Zaber.FirmwareVersion.GetHashCode">
            <summary>
            Gets a hash code for this object.
            </summary>
            <returns>A unique hash code for the object.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.ToInt">
            <summary>
            Returns the firmware version, in the same format as given by a
            Zaber device.
            </summary>
            <returns>A 3-digit integer, where the first digit represents the
            major version number, and the following two represent the minor
            version number.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.ToString">
            <summary>
            Returns a string representation of the firmware version.
            </summary>
            <returns>A string representing the firmware in the same way it is
            represented by the device: as a 3-digit integer.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Equality(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Equality operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>True if both operands have the same major, minor, and 
            build numbers. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Inequality(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Inequality operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>False if both operands have the same major, minor, and 
            build numbers. True otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThan(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Less than operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>True if <paramref name="x"/> is less than 
            <paramref name="y"/>. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThan(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Greater than operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>True if <paramref name="x"/> is greater than 
            <paramref name="y"/>. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThanOrEqual(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Less than or equal to operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>True if <paramref name="x"/> is less than or equal to
            <paramref name="y"/>. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThanOrEqual(Zaber.FirmwareVersion,Zaber.FirmwareVersion)">
            <summary>
            Greater than or equal to operator.
            </summary>
            <param name="x">A FirmwareVersion to be compared.</param>
            <param name="y">The other FirmwareVersion to compare.</param>
            <returns>True if <paramref name="x"/> is greater than or equal to
            <paramref name="y"/>. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Equality(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Equality operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is equal
            to <paramref name="i"/> divided by 100, and the minor version of
            <paramref name="v"/> is equal to <paramref name="i"/> modulo 100.
            False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Inequality(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Inequality operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>False if the major version of <paramref name="v"/> is equal
            to <paramref name="i"/> divided by 100, or if the minor version of
            <paramref name="v"/> is equal to <paramref name="i"/> modulo 100.
            True otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThan(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Less than operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is less
            than <paramref name="i"/> divided by 100. If they are equal, then
            this operator evaluates to true if the minor version of
            <paramref name="v"/> is less than <paramref name="i"/> modulo 100.
            False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThan(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Greater than operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is 
            greater than <paramref name="i"/> divided by 100. If they are 
            equal, then this operator evaluates to true if the minor version of
            <paramref name="v"/> is greater than <paramref name="i"/> modulo 
            100. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThanOrEqual(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Less than or equal to operator for comparing a FirmwareVersion to an
            integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is less
            than <paramref name="i"/> divided by 100. If they are equal, then
            this operator evaluates to true if the minor version of
            <paramref name="v"/> is less than or equal to <paramref name="i"/> 
            modulo 100. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThanOrEqual(Zaber.FirmwareVersion,System.Int32)">
            <summary>
            Greater than or equal to operator for comparing a FirmwareVersion to
            an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is 
            greater than <paramref name="i"/> divided by 100. If they are equal,
            then this operator evaluates to true if the minor version of
            <paramref name="v"/> is greater than or equal to 
            <paramref name="i"/> modulo 100. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Equality(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Equality operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is equal
            to <paramref name="i"/> divided by 100, and the minor version of
            <paramref name="v"/> is equal to <paramref name="i"/> modulo 100.
            False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_Inequality(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Inequality operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>False if the major version of <paramref name="v"/> is equal
            to <paramref name="i"/> divided by 100, or if the minor version of
            <paramref name="v"/> is equal to <paramref name="i"/> modulo 100.
            True otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThan(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Less than operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is less
            than <paramref name="i"/> divided by 100. If they are equal, then
            this operator evaluates to true if the minor version of
            <paramref name="v"/> is less than <paramref name="i"/> modulo 100.
            False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThan(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Greater than operator for comparing a FirmwareVersion to an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is 
            greater than <paramref name="i"/> divided by 100. If they are 
            equal, then this operator evaluates to true if the minor version of
            <paramref name="v"/> is greater than <paramref name="i"/> modulo 
            100. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_LessThanOrEqual(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Less than or equal to operator for comparing a FirmwareVersion to an
            integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is less
            than <paramref name="i"/> divided by 100. If they are equal, then
            this operator evaluates to true if the minor version of
            <paramref name="v"/> is less than or equal to <paramref name="i"/> 
            modulo 100. False otherwise.</returns>
        </member>
        <member name="M:Zaber.FirmwareVersion.op_GreaterThanOrEqual(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Greater than or equal to operator for comparing a FirmwareVersion to
            an integer.
            </summary>
            <param name="v">A FirmwareVersion to be compared.</param>
            <param name="i">An integer to compare with <paramref name="v"/>
            </param>
            <returns>True if the major version of <paramref name="v"/> is 
            greater than <paramref name="i"/> divided by 100. If they are equal,
            then this operator evaluates to true if the minor version of
            <paramref name="v"/> is greater than or equal to 
            <paramref name="i"/> modulo 100. False otherwise.</returns>
        </member>
        <member name="T:Zaber.MessageIdType">
            <summary>
            Indicates the type of the message ID in a message.
            </summary>
        </member>
        <member name="F:Zaber.MessageIdType.None">
            <summary>
            Message ID is not used.
            </summary>
        </member>
        <member name="F:Zaber.MessageIdType.Numeric">
            <summary>
            A numeric message ID is present in the message.
            </summary>
        </member>
        <member name="F:Zaber.MessageIdType.SuppressReply">
            <summary>
            A "--" in the message ID field of the ASCII command
            indicates that the device should not respond with
            a reply message.
            </summary>
            <remarks>
            This type is not supported in Binary messages.
            </remarks>
        </member>
        <member name="T:Zaber.ResponseListener`1">
            <summary>
            Registering for response events can be awkward, especially in scripts. 
            This class provides the base features for other classes to register
            for events and store them until you request them with the 
            <see cref="M:Zaber.ResponseListener`1.NextResponse"/> method. Start and stop listening
            with the <see cref="M:Zaber.ResponseListener`1.Start"/> and <see cref="M:Zaber.ResponseListener`1.Stop"/> methods.
            </summary>
            <typeparam name="T">the type of response objects</typeparam>
        </member>
        <member name="P:Zaber.ResponseListener`1.IsListening">
            <summary>
            Gets a flag showing whether the listener is currently listening for
            responses.
            </summary>
        </member>
        <member name="M:Zaber.ResponseListener`1.Stop">
            <summary>
            Stop listening for responses.
            </summary>
        </member>
        <member name="M:Zaber.ResponseListener`1.RegisterEvent">
            <summary>
            Derived classes need to override this method and register with
            whatever source of events they care about.
            </summary>
            <seealso cref="M:Zaber.ResponseListener`1.UnregisterEvent"/>
            <seealso cref="M:Zaber.ResponseListener`1.OnItemReceived(`0)"/>
        </member>
        <member name="M:Zaber.ResponseListener`1.UnregisterEvent">
            <summary>
            Derived classes need to override this method and unregister from
            whatever source of events they care about.
            </summary>
            <seealso cref="M:Zaber.ResponseListener`1.RegisterEvent"/>
            <seealso cref="M:Zaber.ResponseListener`1.OnItemReceived(`0)"/>
        </member>
        <member name="M:Zaber.ResponseListener`1.Start">
            <summary>
            Start listening for responses.
            </summary>
        </member>
        <member name="M:Zaber.ResponseListener`1.OnItemReceived(`0)">
            <summary>
            Handle a response event.
            </summary>
            <param name="response">The details of the response.</param>
            <seealso cref="M:Zaber.ResponseListener`1.RegisterEvent"/>
            <seealso cref="M:Zaber.ResponseListener`1.UnregisterEvent"/>
        </member>
        <member name="M:Zaber.ResponseListener`1.NextResponse">
            <summary>
            Returns the next response or waits for one to be received.
            </summary>
            <returns>The response message</returns>
            <remarks>
            See <see cref="M:Zaber.ResponseListener`1.NextResponse(System.Boolean)"/> if you don't want to wait for
            a response to be received.
            </remarks>
        </member>
        <member name="M:Zaber.ResponseListener`1.NextResponse(System.Boolean)">
            <summary>
            Returns the next response or waits for one to be received.
            </summary>
            <param name="isBlocking">True if the method should wait for a 
            response if there are none already received.</param>
            <returns>The response message or null if no responses have
            been received.</returns>
        </member>
        <member name="M:Zaber.ResponseListener`1.CheckIsListening(System.Threading.Semaphore)">
            <summary>
            Check that the listener is still listening, based on the current
            semaphore.
            </summary>
            <param name="semaphore">The value to check for null.</param>
        </member>
        <member name="M:Zaber.ResponseListener`1.NextResponse(Zaber.TimeoutTimer)">
            <summary>
            Returns the next response or waits for one to be received.
            </summary>
            <param name="timer">The timer that tells how long to wait
            for a response to be received.</param>
            <returns>The response message.</returns>
            <exception cref="T:Zaber.RequestTimeoutException">When the timer expires 
            before any response is received.</exception>
        </member>
        <member name="M:Zaber.ResponseListener`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.ResponseListener`1.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="T:Zaber.PortListener">
            <summary>
            Registering for response events from a port can be 
            awkward, especially in scripts. This class registers for the response
            events and stores them until you request them with the 
            NextResponse() method. Listening is started automatically when you 
            create a listener, but you can stop and start listening with the 
            Stop() and Start() methods.
            </summary>
        </member>
        <member name="M:Zaber.PortListener.#ctor(Zaber.IZaberPort)">
            <summary>
            Create a new instance.
            </summary>
            <param name="port">The port to listen to for responses.</param>
        </member>
        <member name="M:Zaber.PortListener.RegisterEvent">
            <summary>
            Register with the port.
            </summary>
        </member>
        <member name="M:Zaber.PortListener.UnregisterEvent">
            <summary>
            Unregister from the port.
            </summary>
        </member>
        <member name="M:Zaber.PortListener.port_DataPacketReceived(System.Object,Zaber.DataPacketEventArgs)">
            <summary>
            Handle a response event from the port.
            </summary>
            <param name="sender">The port sending the response.</param>
            <param name="e">The details of the response.</param>
        </member>
        <member name="T:Zaber.MessageType">
            <summary>
            Different kinds of messages that can be sent or received.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Unknown">
            <summary>
            Message whose type is unknown.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Binary">
            <summary>
            Message in binary protocol, request or response.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Request">
            <summary>
            Message in text protocol being sent to the chain of devices.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Response">
            <summary>
            Message in text protocol being sent from a device back to the 
            caller in reply to a request.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Alert">
            <summary>
            Message in text protocol being sent from a device back to the 
            caller without a request.
            </summary>
        </member>
        <member name="F:Zaber.MessageType.Comment">
            <summary>
            Extra information in text protocol being sent from a device back 
            to the caller.
            </summary>
        </member>
        <member name="T:Zaber.MeasurementType">
            <summary>
            Different kinds of measurement represented by the data in different 
            commands. This is used to help convert units of measure.
            </summary>
        </member>
        <member name="F:Zaber.MeasurementType.Other">
            <summary>
            Other types of measurement that don't support unit of measure 
            conversion.
            </summary>
        </member>
        <member name="F:Zaber.MeasurementType.Position">
            <summary>
            Position a device can move to.
            </summary>
        </member>
        <member name="F:Zaber.MeasurementType.Velocity">
            <summary>
            Velocity a device can move at.
            </summary>
        </member>
        <member name="F:Zaber.MeasurementType.Acceleration">
            <summary>
            Acceleration a device can apply.
            </summary>
        </member>
        <member name="F:Zaber.MeasurementType.Current">
            <summary>
            Electrical current.
            </summary>
        </member>
        <member name="T:Zaber.MotionType">
            <summary>
            Different kinds of motion provided by Zaber devices.
            </summary>
            <remarks>This is used to help decide which units of measure are 
            supported for each device type.</remarks>
        </member>
        <member name="F:Zaber.MotionType.Other">
            <summary>
            Other kinds of motion that don't support unit of measure conversion,
            or are not a motion at all.
            </summary>
        </member>
        <member name="F:Zaber.MotionType.Linear">
            <summary>
            Motion in a straight line.
            </summary>
        </member>
        <member name="F:Zaber.MotionType.Rotary">
            <summary>
            Motion in a circle.
            </summary>
        </member>
        <member name="T:Zaber.CommandInfo">
            <summary>
            Descriptive information about a command that Zaber devices support.
            </summary>
        </member>
        <member name="M:Zaber.CommandInfo.#ctor">
            <summary>
            Initialize a new instance.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.Command">
            <summary>
            The enumeration entry from <see cref="T:Zaber.Command"/> 
            that represents this command.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.DataDescription">
            <summary>
            Describes the data value of this command.
            </summary>
            <value>
            Null if the data field is ignored.
            </value>
        </member>
        <member name="P:Zaber.CommandInfo.HasParameters">
            <summary>
            Does the command take parameters. (Only relevant for ASCII commands.)
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.HelpText">
            <summary>
            General descriptive text about the command.
            </summary>
            <remarks>
            When you set this property, it will be reformatted. Line breaks and
            whitespace are removed, except for blank lines.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsAxisCommand">
            <summary>
            Gets or sets a flag showing whether the command can be sent to one
            axis of a multi-axis device. (Only relevant for text commands.)
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsBasic">
            <summary>
            Gets or sets a flag marking this command as a simple one. 
            Defaults to false.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsCurrentPositionReturned">
            <summary>
            Gets or sets a flag showing whether the response to this command
            contains the device's current position.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.AccessLevel">
            <summary>
            Gets or sets the access level of this command or setting. This value,
            in combination with the current access level of the device,
            determines whether the command will be displayed to the user.
            For settings, this property indicates the access level needed for
            writing the value.
            Defaults to zero. Normally one for common commands.
            </summary>
            <remarks>Typically, commands with a value greater than one are either 
            advanced commands or only kept for backward compatibility.</remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsHidden">
            <summary>
            DEPRECATED - compare <see cref="P:Zaber.CommandInfo.AccessLevel"/> with
            the device's current access level to determine whether a command or setting
            should be visible.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsReadOnlySetting">
            <summary>
            Is this command actually a read-only setting?
            </summary>
            <remarks>
            Read-only settings are read differently from other settings. Just
            send the command and the value will be returned.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsResponseOnly">
            <summary>
            Response-only commands are never sent to the devices. They come back as
            responses. The error response is a good example.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsRetrySafe">
            <summary>
            Gets or sets a flag showing whether it is safe to send the command 
            again when a response is lost.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsSetting">
            <summary>
            Is this command actually a setting that can also be retrieved?
            </summary>
            <remarks>
            A setting's value is set by sending the command with the new
            value as the data. A setting's value is read by sending the
            <see cref="F:Zaber.Command.ReturnSetting"/> command with the setting's
            command number as the data.
            </remarks>
        </member>
        <member name="P:Zaber.CommandInfo.IsRequestRelativePosition">
            <summary>
            Whether the parameter is a relative position.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.IsResponseRelativePosition">
            <summary>
            Whether the response to this command is a relative position.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.Name">
            <summary>
            A brief name for the command
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.Number">
            <summary>
            The code number that represents this command.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.RequestUnit">
            <summary>
            The unit of measure in which the parameter is measured.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.RequestUnitFunction">
            <summary>
            The translation function for translating physical units for the 
            parameter.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.RequestUnitScale">
            <summary>
            The scaling factor from physical units to the parameter value.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.ResponseDescription">
            <summary>
            Describes the meaning of the data value in a response packet.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.ResponseUnit">
            <summary>
            The unit of measure in which the return value is measured.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.ResponseUnitFunction">
            <summary>
            The translation function for translating physical units for the 
            return value.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.ResponseUnitScale">
            <summary>
            The scaling factor from base physical units to the return value.
            </summary>
        </member>
        <member name="P:Zaber.CommandInfo.TextCommand">
            <summary>
            A text version of the command to use when the port is in ASCII
            mode.
            </summary>
            <remarks>Some commands will have a text version, some will have a
            binary version, some will have both.</remarks>
        </member>
        <member name="M:Zaber.CommandInfo.SetFormattedHelpText(System.String)">
            <summary>
            Set the <see cref="P:Zaber.CommandInfo.HelpText"/> property without triggering the
            usual formatting.
            </summary>
            <param name="text">The formatted help text.</param>
        </member>
        <member name="M:Zaber.CommandInfo.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.CommandInfo.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.CommandInfo.Clone">
            <summary>
            Create a deep copy of the CommandInfo.
            </summary>
            <returns>A new instance of CommandInfo with all the same property values as the instance invoked on.</returns>
        </member>
        <member name="M:Zaber.CommandInfo.CopyProperties(Zaber.CommandInfo,Zaber.CommandInfo)">
            <summary>
            Called by Clone() to copy properties from one instance to another.
            Subclasses' Clone() implementations can call this to handle the base class copying.
            </summary>
            <param name="aFrom">The instance to copy values from.</param>
            <param name="aTo">The instance to copy values to.</param>
        </member>
        <member name="T:Zaber.Conversation">
            <summary>
            Converts from the asynchronous, event-driven model of the 
            <see cref="T:Zaber.ZaberDevice"/> to a synchronous, request/response model.
            </summary>
            <remarks>
            When you call the <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/> method, the conversation will
            call <see cref="M:Zaber.ZaberDevice.Send(Zaber.Command,System.Int32,System.Byte)"/> on its device, and then sleep until
            a response is returned. See the <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/> method notes for 
            details on support for message ids and pitfalls to avoid.
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.#ctor(Zaber.ZaberDevice)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="device">See <see cref="P:Zaber.Conversation.Device"/></param>
        </member>
        <member name="P:Zaber.Conversation.Device">
            <summary>
            The device that this conversation will send requests through.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.RetryCount">
            <summary>
            Gets or sets the number of times to retry a request after a port error.
            Defaults to 0.
            </summary>
            <remarks>
            By default, when the port raises its 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event, any waiting 
            conversation topics throw a <see cref="T:Zaber.ZaberPortErrorException"/>.
            However, you can set this property to make the conversation retry
            the request a few times before throwing the exception. Only commands
            that are safe will be retried. For example, Move Relative cannot
            be retried, it will always throw an exception if a port error 
            occurs.
            </remarks>
        </member>
        <member name="P:Zaber.Conversation.AreUnexpectedResponsesInvalid">
            <summary>
            Gets or sets a flag for whether unexpected responses should be
            reported as invalid.
            </summary>
            <exception cref="T:System.InvalidOperationException">when this conversation's
            device does not have message ids enabled</exception>
            <remarks>If this flag is true, then only responses with a known
            message id will be processed. Any responses with an unknown message
            id or no message id will trigger 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. The advantage to 
            setting this is that corrupted responses won't accidentally trigger 
            a <see cref="T:Zaber.RequestReplacedException"/>. If you do set this,
            you should probably use the <see cref="P:Zaber.Conversation.Timeout"/> property
            to avoid having a thread that hangs forever.</remarks>
            <seealso cref="P:Zaber.Conversation.RetryCount"/>
        </member>
        <member name="M:Zaber.Conversation.Request(Zaber.Command)">
            <summary>
            Send a command to a Zaber device that doesn't require a data value
            and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.RequestReplacedException">
            Another request has replaced this request.
            </exception>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was <see cref="F:Zaber.Command.Error"/>.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">The request did not
            complete before the timeout expired.</exception>
            <remarks>
            See more details in the other override of <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.RequestReplacedException">
            Another request has replaced this request.
            </exception>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was <see cref="F:Zaber.Command.Error"/>.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">The request did not
            complete before the timeout expired.</exception>
            <remarks>
            <para>This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out. However,
            there are some situations where it can get confused about
            which response goes with which request.</para>
            <para>If message ids are enabled on the device, then coordinating
            requests and responses is reliable. There were some bugs in the 
            firmware related to message ids, so make sure your firmware is at 
            least version 5.07.</para>
            <para>If message ids are disabled (the default), then the following
            scenarios can cause errors:
            <list type="bullet">
            <item>You request a pre-emptable command from the conversation, and
            while it is running, a joystick sends a command to the same device.
            The conversation didn't see the request, so it assumes that the
            response is for the message it sent and returns it normally.</item>
            <item>You request a command from the conversation, and just as it
            starts, another thread requests another command. Depending on the
            timing, the conversation may not record the requests in the same
            order they get sent to the device, and the conversation may return 
            your command's response to the other thread and the other command's 
            response to you.</item>
            <item>You request a command from the conversation, and just as
            it finishes, another thread requests another command. Depending
            on the timing, the conversation may return your command's response
            to the other thread and the other command's response to you.</item>
            </list></para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.Request(System.String)">
            <summary>
            Send a text command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was an error.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">No response was received
            before the timeout expired.</exception>
            <remarks>
            <para>This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out.</para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(System.String,Zaber.Measurement)">
            <summary>
            Send a text command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <param name="measurement">A data value to append to the command
            will be calculated from this. If it is null, then the command 
            will be sent without any extra data.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was an error.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">No response was received
            before the timeout expired.</exception>
            <remarks>
            This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out.
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(System.String,System.Int32,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(System.String,System.Decimal,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(System.String,System.Double,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.TextData"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(System.String,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.Request(System.String,System.Int32)">
            <summary>
            Send a text command to a Zaber device and wait for the response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
            <param name="data">A data value to be appended to the command.
            </param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was an error.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">No response was received
            before the timeout expired.</exception>
            <remarks>
            <para>This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out.</para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(Zaber.Command,Zaber.Measurement)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="measurement">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <returns>The response message</returns>
            <exception cref="T:Zaber.RequestReplacedException">
            Another request has replaced this request.
            </exception>
            <exception cref="T:Zaber.ErrorResponseException">
            The response was <see cref="F:Zaber.Command.Error"/>.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">
            A port error occurred while waiting for a response.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">The request did not
            complete before the timeout expired.</exception>
            <remarks>
            <para>This method sends the request on to the device and then
            puts the thread to sleep until a response is received or the
            <see cref="P:Zaber.Conversation.TimeoutTimer"/> times out. However,
            there are some situations where it can get confused about
            which response goes with which request.</para>
            <para>If message ids are enabled on the device, then coordinating
            requests and responses is reliable. There were some bugs in the 
            firmware related
            to message ids, so make sure your firmware is at least
            version 5.07.</para>
            <para>If message ids are disabled (the default), then the following
            scenarios can cause errors:
            <list type="bullet">
            <item>You request a pre-emptable command from the conversation, and
            while it is running, a joystick sends a command to the same device.
            The conversation didn't see the request, so it assumes that the
            response is for the message it sent and returns it normally.</item>
            <item>You request a command from the conversation, and just as it
            starts, another thread requests another command. Depending on the
            timing, the conversation may not record the requests in the same
            order they get sent to the device, and the conversation may return 
            your command's response to the other thread and the other command's 
            response to you.</item>
            <item>You request a command from the conversation, and just as
            it finishes, another thread requests another command. Depending
            on the timing, the conversation may return your command's response
            to the other thread and the other command's response to you.</item>
            </list></para>
            </remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(Zaber.Command,System.Decimal,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(Zaber.Command,System.Int32,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.RequestInUnits(Zaber.Command,System.Double,Zaber.UnitOfMeasure)">
            <summary>
            Send a command to a Zaber device and wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="value">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <param name="unit">Calculate the <see cref="P:Zaber.DataPacket.Data"/>
            value from this.</param>
            <returns>The response message</returns>
            <remarks>For more details and a list of possible exceptions, see
            <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.</remarks>
        </member>
        <member name="M:Zaber.Conversation.WaitForAlert">
            <summary>
            Wait until the device sends an alert message.
            </summary>
            <returns>The details of the alert message</returns>
        </member>
        <member name="M:Zaber.Conversation.PollUntilIdle">
            <summary>
            Repeatedly check the device's status until it is idle, using
            text-mode requests.
            </summary>
        </member>
        <member name="M:Zaber.Conversation.PollUntilIdle(Zaber.TimeoutTimer)">
            <summary>
            Repeatedly check the device's status until it is idle, using
            text-mode requests and the given timer.
            </summary>
            <param name="timer">How long to wait between polling requests.
            </param>
            <exception cref="T:Zaber.DeviceFaultException">Device reply contains
            a warning flag beginning with an "F".
            Device has a fault condition.</exception>
            <exception cref="T:Zaber.RequestReplacedException">Previous movement
            command has been interrupted and did not complete.
            The command was replaced by a new command, or interruped
            by manual movement control.</exception>
        </member>
        <member name="M:Zaber.Conversation.PrepareForRetry(Zaber.Command,System.Int32,Zaber.ConversationTopic)">
            <summary>
            Record the request that started a topic so it can be retried if 
            necessary.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="topic">The topic to record this request on. It should
            have been returned by StartTopic.</param>
        </member>
        <member name="M:Zaber.Conversation.StartTopic">
            <summary>
            Record that a request is about to be made.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">All message IDs are in
            use in other pending conversations.</exception>
        </member>
        <member name="M:Zaber.Conversation.StartTopic(System.Byte)">
            <summary>
            Record that a request is about to be made.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <param name="messageId">The message id that the request will use.</param>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are disabled,
            messageId will be ignored.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
            <exception cref="T:Zaber.ActiveMessageIdException">A topic already exists
            with the specified message ID.</exception>
        </member>
        <member name="M:Zaber.Conversation.FindTopic(System.Byte,Zaber.MessageType,Zaber.MessageIdType)">
            <summary>
            Find the topic that is waiting for the response we just received.
            If there's no message id, just return the most recently started
            topic.
            </summary>
            <param name="messageId">Message id used to identify the topic,
            or zero.</param>
            <param name="messageType">Message type we just received. Some
            kinds of text responses get ignored.</param>
            <param name="messageIdType">Message ID type of message.</param>
            <returns>The topic that is waiting for the response.</returns>
        </member>
        <member name="M:Zaber.Conversation.CheckReplacement(Zaber.ConversationTopic,Zaber.DeviceMessage)">
            <summary>
            Checks if the current response replaces pre-empted commands.
            </summary>
            <param name="topic"></param>
            <param name="response"></param>
        </member>
        <member name="P:Zaber.Conversation.IsWaiting">
            <summary>
            This is really only used for testing purposes to make sure that no
            requests are left over in any of the internal data structures.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.Timeout">
            <summary>
            Gets or sets the length of time in milliseconds to wait for a response to
            any request. Use System.Threading.Timeout.Infinite (-1) to wait forever.
            Defaults to infinite.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.TimeoutTimer">
            <summary>
            Used to implement the <see cref="P:Zaber.Conversation.Timeout"/>. This is only really useful for
            testing, most clients can just use the <see cref="P:Zaber.Conversation.Timeout"/> property.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.AlertTimeout">
            <summary>
            Gets or sets the length of time in milliseconds to wait for an alert message.
            Use System.Threading.Timeout.Infinite (-1) to wait forever.
            Defaults to infinite.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.AlertTimeoutTimer">
            <summary>
            Used to implement the <see cref="P:Zaber.Conversation.AlertTimeout"/>. This is only 
            really useful for testing, most clients can just use the 
            <see cref="P:Zaber.Conversation.AlertTimeout"/> property.
            </summary>
        </member>
        <member name="P:Zaber.Conversation.PollTimeout">
            <summary>
            Gets or sets the length of time in milliseconds to wait between
            polling requests.
            Defaults to 100.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When the timeout
            value is negative or zero.</exception>
        </member>
        <member name="P:Zaber.Conversation.PollTimeoutTimer">
            <summary>
            Used to implement the <see cref="P:Zaber.Conversation.PollTimeout"/>. This is only 
            really useful for testing, most clients can just use the 
            <see cref="P:Zaber.Conversation.PollTimeout"/> property.
            </summary>
        </member>
        <member name="M:Zaber.Conversation.Send(Zaber.Command)">
            <summary>
            Send a command to this device that doesn't require a data value
            and don't wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
        </member>
        <member name="M:Zaber.Conversation.Send(Zaber.Command,System.Int32)">
            <summary>
            Send a command to this device without using a message id and don't 
            wait for the response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
        </member>
        <member name="M:Zaber.Conversation.Send(Zaber.Command,System.Int32,System.Byte)">
            <summary>
            Send a command to this device and don't wait for a response.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
        </member>
        <member name="M:Zaber.Conversation.Send(System.String)">
            <summary>
            Send a command to this device and don't wait for a response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash or device number.</param>
        </member>
        <member name="M:Zaber.Conversation.Send(System.String,System.Byte)">
            <summary>
            Send a command to this device and don't wait for a response.
            </summary>
            <param name="text">The command to send to the device without the 
            slash, device address and axis number.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
        </member>
        <member name="M:Zaber.Conversation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.Conversation.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="M:Zaber.Conversation.AddAxis(Zaber.Conversation)">
            <summary>
            Add a conversation that represents an axis for this controller.
            </summary>
            <param name="axis">The axis to add.</param>
            <remarks>All controllers have a collection of devices - one
            for each axis.</remarks>
        </member>
        <member name="P:Zaber.Conversation.Axes">
            <summary>
            Get a list of axes for this device.
            </summary>
        </member>
        <member name="M:Zaber.Conversation.CalculateMessageId">
            <summary>
            Calculates the next message id.
            </summary>
            <returns>The message id.</returns>
        </member>
        <member name="M:Zaber.Conversation.OnTopicNotFound">
            <summary>
            Handle the event when a response comes in that doesn't correspond
            to any known topic. This is only called when 
            <see cref="P:Zaber.Conversation.AreUnexpectedResponsesInvalid"/> is true.
            </summary>
        </member>
        <member name="T:Zaber.ConversationCollection">
            <summary>
            Treats a collection of conversations as a single conversation. Useful 
            for making requests from aliases (including the "all devices" alias on 
            device number 0). When you make a request, it waits for a response from
            every conversation in the collection before it returns.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.#ctor(Zaber.DeviceCollection)">
            <summary>
            Create a new instance.
            </summary>
            <param name="device">The device that this conversation will send 
            single requests through.</param>
        </member>
        <member name="P:Zaber.ConversationCollection.AreUnexpectedResponsesInvalid">
            <summary>
            Gets or sets a flag for whether unexpected responses should be
            reported as invalid.
            </summary>
            <exception cref="T:System.InvalidOperationException">when this conversation's
            device does not have message ids enabled</exception>
            <remarks>If this flag is true, then only responses with a known
            message id will be processed. Any responses with an unknown message
            id or no message id will trigger 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. The advantage to 
            setting this is that corrupted responses won't accidentally trigger 
            a <see cref="T:Zaber.RequestReplacedException"/>. If you do set this,
            you should probably use the <see cref="T:System.Threading.Timeout"/> property
            to avoid having a thread that hangs forever. Setting this on
            a conversation collection will set it on all members of the
            collection.</remarks>
            <seealso cref="P:Zaber.ConversationCollection.RetryCount"/>
        </member>
        <member name="P:Zaber.ConversationCollection.RetryCount">
            <summary>
            Gets or sets the number of times to retry a request after a port error.
            Defaults to 0.
            </summary>
            <remarks>
            By default, when the port raises its 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event, any waiting 
            conversation topics throw a <see cref="T:Zaber.ZaberPortErrorException"/>.
            However, you can set this property to make the conversation retry
            the request a few times before throwing the exception. Only commands
            that are safe will be retried. For example, Move Relative cannot
            be retried, it will always throw an exception if a port error 
            occurs. Setting this on a conversation collection will set it
            on all members of the collection.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.Request(Zaber.Command,System.Int32)">
            <summary>
            Send a request to a Zaber device collection and wait for the responses
            from all its member devices.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The response message from the first conversation in the
            list.</returns>
            <exception cref="T:Zaber.RequestCollectionException">
            At least one conversation in the list raised an exception. The detailed
            responses and exceptions are available from the exception as a list of
            <see cref="T:Zaber.ConversationTopic"/> objects.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">Some of the requests did not
            complete before the timeout expired.</exception>
            <remarks>
            This method sends the request on to this conversation's device and then
            puts the thread to sleep until a response is received from every
            conversation in the list. However,
            there are some situations where it can get confused about
            which response goes with which request. See <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>
            for details.
            </remarks>
            <seealso cref="M:Zaber.ConversationCollection.RequestCollection(Zaber.Command,System.Int32[])"/>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopic(System.Byte)">
            <summary>
            Record that a request is about to be made.
            </summary>
            <param name="messageId">The message id that the request will use.</param>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the device directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopicCollection">
            <summary>
            Record that a request is about to be made to several devices.
            </summary>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the devices directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.StartTopicCollection(System.Byte)">
            <summary>
            Record that a request is about to be made to several devices.
            </summary>
            <param name="messageId">The message id that the request will use.</param>
            <returns>The topic that will monitor the request.</returns>
            <remarks>
            <para>
            You can then make the request using the devices directly and call 
            <see cref="M:Zaber.ConversationTopic.Wait"/> to wait for the response. This is
            useful if you want to make several unrelated requests of several devices
            and then wait until they are all completed. If message ids are enabled,
            be sure to use the message id from the topic when sending the request.
            </para>
            <para>
            If message ids are disabled, then this technique is not thread-safe,
            because there's no guarantee that two requests from two threads will get 
            sent to the device in the same order that their topics were started.
            If you're sending requests to one device from more than one thread,
            either enable message ids, or implement your own locking at a higher level.
            </para>
            </remarks>
        </member>
        <member name="M:Zaber.ConversationCollection.OnTopicNotFound">
            <summary>
            Handle the event when a response comes in that doesn't correspond
            to any known topic. This is only called when 
            <see cref="P:Zaber.ConversationCollection.AreUnexpectedResponsesInvalid"/> is true.
            </summary>
        </member>
        <member name="P:Zaber.ConversationCollection.IsWaiting">
            <summary>
            This is really only used for testing purposes to make sure that no
            requests are left over in any of the internal data structures.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.RequestCollection(Zaber.Command,System.Int32[])">
            <summary>
            Send a request to several conversations and coordinate all the responses.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">An array of data values. One will be sent to each
            conversation in the list. There are two special cases: one entry and no entries.
            An array with one entry will be used to send a single request to this 
            conversation's device and then the thread will block until a response 
            is received from every conversation in the list. An array with no entries
            is the same as one entry with value 0. See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>A list of response messages in the same order that the
            conversations appear in the list.</returns>
            <exception cref="T:Zaber.RequestCollectionException">
            At least one request in the list raised an exception. The detailed
            responses and exceptions are available from the exception as a list of
            <see cref="T:Zaber.ConversationTopic"/> objects.
            </exception>
            <exception cref="T:Zaber.RequestTimeoutException">Some of the requests did not
            complete before the timeout expired.</exception>
            <remarks>
            This method sends the request on to the device and then
            puts the thread to sleep until a response is received from every
            device in the collection. However,
            there are some situations where it can get confused about
            which response goes with which request. See 
            <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>
            for details.
            </remarks>
            <seealso cref="M:Zaber.ConversationCollection.Request(Zaber.Command,System.Int32)"/>
        </member>
        <member name="M:Zaber.ConversationCollection.PollUntilIdle">
            <summary>
            Repeatedly check the device's status until it is idle, using
            text-mode requests.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.PollUntilIdle(Zaber.TimeoutTimer)">
            <summary>
            Repeatedly check the device's status until it is idle, using
            text-mode requests and the given timer.
            </summary>
            <param name="timer">How long to wait between polling requests.
            </param>
        </member>
        <member name="M:Zaber.ConversationCollection.Sort">
            <summary>
            Sorts the items in the list by their device numbers ascending.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.IndexOf(Zaber.Conversation)">
            <summary>
                Searches for the specified conversation and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The conversation to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.Insert(System.Int32,Zaber.Conversation)">
            <summary>
                Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.ConversationCollection.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationCollection.Add(Zaber.Conversation)">
            <summary>
            Adds a conversation to the collection.
            </summary>
            <param name="item">The conversation to add to the collection</param>
        </member>
        <member name="M:Zaber.ConversationCollection.Clear">
            <summary>
            Removes all conversations from the collection.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.Contains(Zaber.Conversation)">
            <summary>
            Determines whether the collection contains a specific conversation.
            </summary>
            <param name="item">The conversation to locate in the collection</param>
            <returns>true if the conversation is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.CopyTo(Zaber.Conversation[],System.Int32)">
            <summary>
            Copies the conversations in the collection to a System.Array, 
            starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the
            destination of the conversations copied from the collection. The
            System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which 
            copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less 
            than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">arrayIndex is equal to or
            greater than the length of array.-or-The number of elements in the
            source collection is greater than the available space from
            arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="P:Zaber.ConversationCollection.Count">
            <summary>
            Gets the number of conversations contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.ConversationCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Zaber.ConversationCollection.Remove(Zaber.Conversation)">
            <summary>
            Removes the first occurrence of a specific conversation from the collection.
            </summary>
            <param name="item">The conversation to remove from the collection.</param>
            <returns>true if the conversation was successfully removed from the collection,
                otherwise false. This method also returns false if the conversation is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="T:Zaber.ConversationException">
            <summary>
            This is a base class for all the exceptions that the 
            <see cref="T:Zaber.Conversation"/> class throws. It lets you simplify your 
            catch blocks if you want to treat all exceptions the same.
            </summary>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one.</param>
        </member>
        <member name="M:Zaber.ConversationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:Zaber.ConversationTopic">
            <summary>
            Coordinates a request with a response 
            in the communications with a single device.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.ZaberPortError">
            <summary>
            Gets or sets the port error that was detected while waiting
            for a response.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.ReplacementResponse">
            <summary>
            Gets or sets the details of a response when this topic's request has
            been replaced by another.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.RequestCommand">
            <summary>
            Gets or sets the command that was sent to the device.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.RequestData">
            <summary>
            Gets or sets the data value that was sent to the device.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.RetryCount">
            <summary>
            Gets or sets the number of retries remaining.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.Response">
            <summary>
            Gets or sets the details of the response received from the device.
            </summary>
            <remarks>Setting this completes the topic.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.RetryPacket">
            <summary>
            Gets or sets a data packet that was used to retry the request after
            a port error.
            </summary>
            <remarks>This is recorded so that the retry can be cancelled if the
            original response is received before the retry request gets sent.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.IsAlert">
            <summary>
            Gets or sets a flag showing if this topic is waiting for an alert
            message instead of a regular response.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.IsCanceled">
            <summary>
            Get a flag showing whether this topic was canceled by a call to
            <see cref="M:Zaber.ConversationTopic.Cancel"/>.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Cancel">
            <summary>
            Stop waiting for a response.
            </summary>
            <remarks>Sets IsCanceled to true and marks the topic complete.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.WaitHandle">
            <summary>
            Get a WaitHandle that will be released when the topic is completed.
            </summary>
            <remarks>
            This is useful when you want to use more sophisticated thread coordination.
            You can use this WaitHandle in the WaitHandle class's WaitAll() or WaitAny()
            methods. If you just want to do a simple wait, use the <see cref="M:Zaber.ConversationTopic.Wait"/>
            or <see cref="M:Zaber.ConversationTopic.Wait(Zaber.TimeoutTimer)"/> methods.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopic.Complete">
            <summary>
            Mark the topic as complete, raise the event, and set the wait handle.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopic.MessageId">
            <summary>
            Gets or sets the message identifier used to coordinate requests 
            and responses.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Wait">
            <summary>
            Blocks the current thread until the topic is completed.
            </summary>
            <returns>This method always returns true.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopic.Wait(Zaber.TimeoutTimer)">
            <summary>
            Blocks the current thread until the topic is completed or the
            timer times out.
            </summary>
            <param name="timeoutTimer">The timer to wait with.</param>
            <returns>True if the topic completed before the timer expired, 
            otherwise false.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="E:Zaber.ConversationTopic.Completed">
            <summary>
            Raised when the topic is completed.
            </summary>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopic.Response"/>, <see cref="P:Zaber.ConversationTopic.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopic.ReplacementResponse"/>.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopic.IsComplete">
            <summary>
            Gets a flag showing whether the request has been completed.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Validate">
            <summary>
            Validates that the request has been completed successfully.
            </summary>
            <remarks>
            If you want to check whether the response is valid without throwing
            an exception, use <see cref="P:Zaber.ConversationTopic.IsValid"/> instead.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The request has not
            been completed yet.</exception>
            <exception cref="T:Zaber.RequestReplacedException">The request was replaced
            by another request and will not complete.</exception>
            <exception cref="T:Zaber.ZaberPortErrorException">A port error occurred, so
            the status of the request is unknown.</exception>
            <exception cref="T:Zaber.ErrorResponseException">The device responded with
            an error.</exception>
            <exception cref="T:Zaber.RequestCollectionException">Multiple requests were
            made together, and some of them failed.</exception>
        </member>
        <member name="P:Zaber.ConversationTopic.IsValid">
            <summary>
            Gets a flag showing whether the request has been completed successfully.
            </summary>
            <seealso cref="M:Zaber.ConversationTopic.Validate"/>
        </member>
        <member name="P:Zaber.ConversationTopic.IsFlowControlRejected">
            <summary>
            Gets a flag showing whether the request was rejected for flow control reasons and should be retried.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopic.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="T:Zaber.ConversationTopicCollection">
            <summary>
            A collection of <see cref="T:Zaber.ConversationTopic"/> objects. It's used to represent
            a topic in a <see cref="T:Zaber.ConversationCollection"/>.
            </summary>
            <remarks>
            This class is both a ConversationTopic and a collection of them. Waiting for it
            waits for all its items to complete. The class is almost completely thread-safe.
            The only exception is the <see cref="M:Zaber.ConversationTopicCollection.GetEnumerator"/> method. Enumerating through
            the collection while other threads are marking its items as completed or adding or
            removing items is not safe. A safe alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Response">
            <summary>
            Gets the details of the response received from the device.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.ReplacementResponse">
            <summary>
            Gets the details of a response when this topic's request has
            been replaced by another.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.ZaberPortError">
            <summary>
            Gets the port error that was detected while waiting
            for a response.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            Setting this is not supported.</remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Wait">
            <summary>
            Blocks the current thread until the topic is completed.
            </summary>
            <returns>This method always returns true.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopicCollection.Response"/>, <see cref="P:Zaber.ConversationTopicCollection.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopicCollection.ReplacementResponse"/>. However, if the topic 
            collection is empty, this method immediately returns true
            without waiting.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Wait(Zaber.TimeoutTimer)">
            <summary>
            Blocks the current thread until the topic is completed or the
            timer times out.
            </summary>
            <param name="timeoutTimer">The timer to wait with.</param>
            <returns>True if the topic completed before the timer expired, 
            otherwise false.</returns>
            <remarks>
            The topic can be completed by setting any of these properties:
            <see cref="P:Zaber.ConversationTopicCollection.Response"/>, <see cref="P:Zaber.ConversationTopicCollection.ZaberPortError"/>,
            <see cref="P:Zaber.ConversationTopicCollection.ReplacementResponse"/>. However, if the topic 
            collection is empty, this method immediately returns true
            without waiting.
            </remarks>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsCanceled">
            <summary>
            Get a flag showing whether this topic was canceled by a call to
            <see cref="M:Zaber.ConversationTopicCollection.Cancel"/>.
            </summary>
            <remarks>Actually delegates to the first topic in the collection.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Cancel">
            <summary>
            Stop waiting for a response.
            </summary>
            <remarks>Sets IsCanceled to true and marks the topic complete.</remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Validate">
            <summary>
            Validates that the request has been completed successfully.
            </summary>
            <remarks>
            If you want to check whether the response is valid without throwing
            an exception, use <see cref="P:Zaber.ConversationTopicCollection.IsValid"/> instead.
            </remarks>
            <exception cref="T:Zaber.RequestCollectionException">Multiple requests were
            made together, and some of them failed.</exception>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsValid">
            <summary>
            Gets a flag showing whether the request has been completed successfully.
            </summary>
            <seealso cref="M:Zaber.ConversationTopicCollection.Validate"/>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Add(Zaber.ConversationTopic)">
            <summary>
            Adds a topic to the collection.
            </summary>
            <param name="item">The topic to add to the collection</param>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Clear">
            <summary>
            Removes all topics from the collection.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Contains(Zaber.ConversationTopic)">
            <summary>
            Determines whether the collection contains a specific topic.
            </summary>
            <param name="item">The topic to locate in the collection</param>
            <returns>true if the topic is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)">
            <summary>
            Copies the topics in the collection to a System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the
            destination of the topics copied from the collection. The
            System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which
            copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less
            than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">arrayIndex is equal to or
             greater than the length of array.-or-The number of elements in the
             source collection is greater than the available space from
             arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Count">
            <summary>
            Gets the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Remove(Zaber.ConversationTopic)">
            <summary>
            Removes the first occurrence of a specific item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns>true if the item was successfully removed from the collection,
                otherwise false. This method also returns false if the item is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
            <remarks>
            Iterating through the collection is not thread-safe. A safe 
            alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't 
            see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
            <remarks>
            Iterating through the collection is not thread-safe. A safe 
            alternative would be to call <see cref="M:Zaber.ConversationTopicCollection.CopyTo(Zaber.ConversationTopic[],System.Int32)"/>
            and then iterate through the array, but remember that you wouldn't 
            see any changes to the
            collection that occurred after the call to CopyTo.
            </remarks>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.IndexOf(Zaber.ConversationTopic)">
            <summary>
                Searches for the specified item and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The item to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.Insert(System.Int32,Zaber.ConversationTopic)">
            <summary>
                Inserts an item into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.ConversationTopicCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the item at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.ConversationTopicCollection.Item(System.Int32)">
            <summary>
                Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get or set.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.ConversationTopicCollection.Count"/>.</exception>
            <remarks>
            Note that index is not necessarily the same as device number.
            </remarks>
        </member>
        <member name="T:Zaber.ActiveMessageIdException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            the requested message id is already being used by an active topic.
            </summary>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="M:Zaber.ActiveMessageIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:Zaber.DeviceListener">
            <summary>
            Registering for response events from a <see cref="T:Zaber.ZaberDevice"/> can be 
            awkward, especially in scripts. This class registers for the response
            events and stores them until you request them with the 
            NextResponse() method. Listening is started automatically when you 
            create a listener, but you can stop and start listening with the 
            Stop() and Start() methods.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.#ctor(Zaber.ZaberDevice)">
            <summary>
            Create a new instance.
            </summary>
            <param name="device">The device to listen to for responses.</param>
        </member>
        <member name="M:Zaber.DeviceListener.#ctor(Zaber.Conversation)">
            <summary>
            Create a new instance.
            </summary>
            <param name="conversation">The conversation to listen to for 
            responses.</param>
        </member>
        <member name="M:Zaber.DeviceListener.RegisterEvent">
            <summary>
            Register with the device.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.UnregisterEvent">
            <summary>
            Unregister from the device.
            </summary>
        </member>
        <member name="M:Zaber.DeviceListener.device_MessageReceived(System.Object,Zaber.DeviceMessageEventArgs)">
            <summary>
            Handle a response event from the device.
            </summary>
            <param name="sender">The device sending the response.</param>
            <param name="e">The details of the response.</param>
        </member>
        <member name="T:Zaber.LoopbackException">
            <summary>
            A loopback connection was detected on a serial port.
            </summary>
            <remarks>A loopback connection
            is a connection from the serial port's send pin to the receive pin. 
            This makes it appear as though the serial port is receiving a copy of 
            every byte it sends. This can happen intentionally when a loopback dongle
            is connected to the serial port, or unintentionally when wires are
            connected incorrectly.</remarks>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.LoopbackException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo 
            that holds the serialized object data about the exception being 
            thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext 
            that contains contextual information about the source or 
            destination.</param>
        </member>
        <member name="T:Zaber.Measurement">
            <summary>
            Holds the combination of a measured value and its unit of measure.
            </summary>
        </member>
        <member name="M:Zaber.Measurement.#ctor(Zaber.Measurement)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="measurement">The measurement to make a copy of.</param>
        </member>
        <member name="M:Zaber.Measurement.#ctor(System.Decimal,Zaber.UnitOfMeasure)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="value">The measured value.</param>
            <param name="unit">What units the measured value is in.</param>
        </member>
        <member name="M:Zaber.Measurement.#ctor(System.Double,Zaber.UnitOfMeasure)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="value">The measured value.</param>
            <param name="unit">What units the measured value is in.</param>
        </member>
        <member name="M:Zaber.Measurement.#ctor(System.Int32,Zaber.UnitOfMeasure)">
            <summary>
            Initialize a new instance.
            </summary>
            <param name="value">The measured value.</param>
            <param name="unit">What units the measured value is in.</param>
        </member>
        <member name="M:Zaber.Measurement.#ctor(Zaber.Measurement,Zaber.UnitOfMeasure)">
            <summary>
            Copy constructor to convert a measurement to another related unit.
            </summary>
            <param name="measurement">The measurement whose value the new
            measurement should share.</param>
            <param name="newUnit">The new unit to convert the value to.</param>
        </member>
        <member name="P:Zaber.Measurement.Value">
            <summary>
            Gets the measured value.
            </summary>
        </member>
        <member name="P:Zaber.Measurement.Unit">
            <summary>
            Describes what units the measured value is in.
            </summary>
        </member>
        <member name="M:Zaber.Measurement.Equals(System.Object)">
            <summary>
            Compare with another object.
            </summary>
            <param name="obj">the object to compare with</param>
            <returns>True if it is another Measurement with the same value and
            units, otherwise false.</returns>
        </member>
        <member name="M:Zaber.Measurement.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>A hash code for the current Measurement.</returns>
        </member>
        <member name="M:Zaber.Measurement.ToString">
            <summary>
            Convert the Measurement to a string.
            </summary>
            <returns>A string representation of the Measurement.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Addition(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Adds two specified measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement.</param>
            <returns>The sum of the two measurements, using the second 
            parameter's units of measure.</returns>
            <exception cref="T:System.ArgumentException">The units of the parameters
            are incompatible.</exception>
        </member>
        <member name="M:Zaber.Measurement.Add(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Adds two specified measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement.</param>
            <returns>The sum of the two measurements, using the second 
            parameter's units of measure.</returns>
            <exception cref="T:System.ArgumentException">The units of the parameters
            are incompatible.</exception>
        </member>
        <member name="M:Zaber.Measurement.op_Subtraction(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Subtracts two specified measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement.</param>
            <returns>The second measurement subtracted from the first, using 
            the second parameter's units of measure.</returns>
            <exception cref="T:System.ArgumentException">The units of the parameters
            are incompatible.</exception>
        </member>
        <member name="M:Zaber.Measurement.Subtract(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Subtracts two specified measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement.</param>
            <returns>The second measurement subtracted from the first, using 
            the second parameter's units of measure.</returns>
            <exception cref="T:System.ArgumentException">The units of the parameters
            are incompatible.</exception>
        </member>
        <member name="M:Zaber.Measurement.op_UnaryNegation(Zaber.Measurement)">
            <summary>
            Negates the value of a specified measurement.
            </summary>
            <param name="measurement">A measurement.</param>
            <returns>The negative value of the measurement.</returns>
        </member>
        <member name="M:Zaber.Measurement.Negate(Zaber.Measurement)">
            <summary>
            Negates the value of a specified measurement.
            </summary>
            <param name="measurement">A measurement.</param>
            <returns>The negative value of the measurement.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(System.Decimal,Zaber.Measurement)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(System.Double,Zaber.Measurement)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(System.Int32,Zaber.Measurement)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(Zaber.Measurement,System.Decimal)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(Zaber.Measurement,System.Double)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Multiply(Zaber.Measurement,System.Int32)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.Multiply(Zaber.Measurement,System.Double)">
            <summary>
            Multiplies a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement multiplied by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Division(Zaber.Measurement,System.Decimal)">
            <summary>
            Divides a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement divided by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Division(Zaber.Measurement,System.Double)">
            <summary>
            Divides a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement divided by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Division(Zaber.Measurement,System.Int32)">
            <summary>
            Divides a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement divided by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.Divide(Zaber.Measurement,System.Double)">
            <summary>
            Divides a measurement by a ratio.
            </summary>
            <param name="measurement">A measurement.</param>
            <param name="ratio">A ratio.</param>
            <returns>The measurement divided by the ratio.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Equality(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Compare two measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement</param>
            <returns>True if the two measurements have the same values
            and units, otherwise false.</returns>
        </member>
        <member name="M:Zaber.Measurement.op_Inequality(Zaber.Measurement,Zaber.Measurement)">
            <summary>
            Compare two measurements.
            </summary>
            <param name="first">A measurement.</param>
            <param name="second">A measurement</param>
            <returns>False if the two measurements have the same values
            and units, otherwise true.</returns>
        </member>
        <member name="T:Zaber.PlugIns.CompiledScriptLanguage">
            <summary>
            Provides scripting services for statically-typed languages.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.CompiledScriptLanguage.#ctor(System.CodeDom.Compiler.CompilerInfo)">
            <summary>
            Create a new instance.
            </summary>
            <param name="compilerInfo">The compiler that this language 
            represents.</param>
        </member>
        <member name="P:Zaber.PlugIns.CompiledScriptLanguage.CompilerInfo">
            <summary>
            The details of the compiler this language represents.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.CompiledScriptLanguage.UniqueExtensions">
            <summary>
            Get a list of the file extensions this language supports.
            </summary>
            <returns>A collection of strings. The strings do not start with a 
            period.</returns>
        </member>
        <member name="M:Zaber.PlugIns.CompiledScriptLanguage.CreatePlugIn(System.String)">
            <summary>
            Convert a script to a plug in that can be executed.
            </summary>
            <param name="sourceCode">The source code for the script.</param>
            <returns>The plug in that can be executed.</returns>
            <exception cref="T:System.ArgumentException">The compiler generated errors.
            The error details can be found in the 
            <see cref="P:Zaber.PlugIns.ScriptLanguage.CompilerErrors"/>
            property. Compiler warnings do not cause the exception, but they
            can also be found in the 
            <see cref="P:Zaber.PlugIns.ScriptLanguage.CompilerErrors"/> property.
            </exception>
        </member>
        <member name="M:Zaber.PlugIns.CompiledScriptLanguage.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object;
            otherwise, false.</returns>
            <remarks>Just compares whether the two CompiledScriptLanguages use the 
            same compiler info.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.CompiledScriptLanguage.GetHashCode">
            <summary>
            Serves as a hash function for the CompiledScriptLanguage.
            </summary>
            <returns>A hash code for the CompiledScriptLanguage.</returns>
            <remarks>Just returns the compiler info's hash code.</remarks>
        </member>
        <member name="T:Zaber.PlugIns.DynamicPlugIn">
            <summary>
            An adapter from the IPlugIn interface to a dynamic language script.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.DynamicPlugIn.#ctor(System.String,Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>
            Create a new instance.
            </summary>
            <param name="sourceCode">the source code to run</param>
            <param name="scriptEngine">the script engine to run the script
            with</param>
        </member>
        <member name="M:Zaber.PlugIns.DynamicPlugIn.Run">
            <summary>
            Run the plug in's operation.
            </summary>
            <remarks>
            The method returns when the operation has completed. Exceptions in the
            operation will be thrown from this method.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.DynamicPlugIn.Cancel">
            <summary>
            Ask the operation to stop running.
            </summary>
            <remarks>
            <para>This is just a request, plug ins do not have to respect it. A common
            implementation is to set an IsCancelled flag and leave it up to
            the running code to check the flag at regular intervals.</para>
            <para>If a plug in does abort its operation it can either return
            normally, or throw an exception. 
            <see cref="T:System.OperationCanceledException"/> is a good exception
            to throw in this case.</para>
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.DynamicPlugIn.PortFacade">
            <summary>
            Gets or sets the port facade that gives access to all the devices 
            and conversations.
            </summary>
            <remarks>
            The port facade may or may not be open when it is passed to this 
            property. Scripts can check by using the 
            <see cref="P:Zaber.ZaberPortFacade.IsOpen"/> property.
            The plug in does not own this facade and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.DynamicPlugIn.Conversation">
            <summary>
            Gets or sets the conversation that was selected by the user.
            </summary>
            <value>
            May be null if none was selected, or if the port hasn't been opened
            yet.
            </value>
            <remarks>
            The plug in does not own this conversation and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.DynamicPlugIn.Input">
            <summary>
            Gets or sets a text reader that will provide input to the script.
            </summary>
            <remarks>
            The plug in owns this reader and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.DynamicPlugIn.Output">
            <summary>
            Gets or sets a text writer that will receive output from the script.
            </summary>
            <remarks>
            The plug in owns this writer and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.DynamicPlugIn.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.DynamicPlugIn.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="T:Zaber.PlugIns.DynamicScriptLanguage">
            <summary>
            Provides scripting services for dynamically-typed languages.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.DynamicScriptLanguage.#ctor(Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>
            Create an instance.
            </summary>
            <param name="scriptEngine">a script engine for the language</param>
        </member>
        <member name="P:Zaber.PlugIns.DynamicScriptLanguage.UniqueExtensions">
            <summary>
            Get a list of the file extensions this language supports.
            </summary>
            <returns>A collection of strings. The strings do not start with a 
            period.</returns>
        </member>
        <member name="M:Zaber.PlugIns.DynamicScriptLanguage.CreatePlugIn(System.String)">
            <summary>
            Convert a script to a plug in that can be executed.
            </summary>
            <param name="sourceCode">The source code for the script.</param>
            <returns>The plug in that can be executed.</returns>
        </member>
        <member name="M:Zaber.PlugIns.DynamicScriptLanguage.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>true if the specified System.Object is equal to the current System.Object;
            otherwise, false.</returns>
            <remarks>Just compares whether the two DynamicScriptLanguages use the 
            same script engine.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.DynamicScriptLanguage.GetHashCode">
            <summary>
            Serves as a hash function for the DynamicScriptLanguage.
            </summary>
            <returns>A hash code for the DynamicScriptLanguage.</returns>
            <remarks>Just returns the script engine's hash code.</remarks>
        </member>
        <member name="T:Zaber.PlugIns.IPlugInManager">
            <summary>
            An interface that plug ins can use to pass data between them.
            </summary>
            <remarks>
            If one plug in wants to send data to another one, it can declare a 
            property of type IPlugInManager. Then it calls manager.SetProperty()
            to pass data to any plug ins with properties of that type. If you want
            to have more than one property of the same type, use names for the
            properties.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.IPlugInManager.SetProperty(System.Object,System.Type)">
            <summary>
            Set a property of the given type on any plug ins that have one.
            </summary>
            <param name="value">The value to pass to each plug in.</param>
            <param name="type">The type of property to set. Any properties of
            this type or its subtypes will be set.</param>
        </member>
        <member name="M:Zaber.PlugIns.IPlugInManager.SetProperty(System.Object,System.Type,System.String)">
            <summary>
            Set a property of the given type and name on any plug ins that 
            have one.
            </summary>
            <param name="value">The value to pass to each plug in.</param>
            <param name="type">The type of property to set. Any properties of
            this type or its subtypes will be set.</param>
            <param name="name">The name of the property. This will match the
            name declared in the <see cref="T:Zaber.PlugIns.PlugInPropertyAttribute"/>. The 
            default name is null.</param>
        </member>
        <member name="T:Zaber.PlugIns.PlugInPropertyAttribute">
            <summary>
            Mark a plug in's property to be automatically set by the host 
            program.
            </summary>
            <remarks>
            Only properties of certain types will be set by the host program:
            <see cref="T:Zaber.ZaberPortFacade"/> will receive the active port facade,
            <see cref="T:Zaber.Conversation"/> will receive the selected conversation from 
            the port facade, System.IO.TextReader will receive a user input stream 
            if the host program has one, System.IO.TextWriter will receive a 
            user output stream if the host has one. Other property types can be 
            used together with the <see cref="T:Zaber.PlugIns.IPlugInManager"/>. This lets one plug
            in pass data to other plug ins.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInPropertyAttribute.Name">
            <summary>
            Gets or sets the name for this property. If a plug in needs more 
            than one property of the same type, you can distinguish between
            them with different names.
            </summary>
            <remarks>Named properties are only set when another plugin calls
            <see cref="M:Zaber.PlugIns.IPlugInManager.SetProperty(System.Object,System.Type,System.String)"/>.
            The default name of null counts as a separate name, so
            you could have one string property without a name, and another
            string property with a name, and they would be set independently.
            The name works in combination with the type, so if another plug in
            sets a property with the same name, but an incompatible type, then
            this property will not be set.
            </remarks>
        </member>
        <member name="T:Zaber.PlugIns.PlugInAttribute">
            <summary>
            Mark a class as a plug in to be used in a Zaber library client program.
            </summary>
            <remarks>
            The class must also derive from System.Windows.Forms.Control. Deriving from 
            UserControl is the simplest.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInAttribute.Name">
            <summary>
            Declare a name to be used for display in the client program. Defaults to
            the class name.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.SleepCancellationResponse">
            <summary>
            Specifies how 
            <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)"/> should
            respond when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Throw">
            <summary>
            Throw an <c>OperationCanceled</c> exception.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Wake">
            <summary>
            Don't throw an exception. As soon as <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/>
            is called, return normally from the call to 
            <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)"/>.
            </summary>
        </member>
        <member name="F:Zaber.PlugIns.SleepCancellationResponse.Ignore">
            <summary>
            Ignore any calls to <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/>. Always sleep
            the requested time before returning.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.FileFinder">
            <summary>
            Searches for files within a named folder, and looks up the directory
            tree to find that folder if necessary.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.#ctor(System.String)">
            <summary>
            Creates a new FileFinder using the specified directory.
            </summary>
            <param name="directoryPath">The full path of the folder to look in
            for files.</param>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a new FileFinder using the specified directory.
            </summary>
            <param name="directory">The folder to look in for files.</param>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Create a new instance of the FileFinder class, climbing the
            directory tree if necessary.
            </summary>
            <param name="startDirectory">The directory to start searching from.</param>
            <param name="folderName">The folder to look for.</param>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Create a new instance of the FileFinder class, climbing the
            directory tree if necessary when specified.
            </summary>
            <param name="startDirectory">The directory to start searching from,
            or to simply look in if <paramref name="climb"/> is false.</param>
            <param name="folderName">The folder to look for.</param>
            <param name="climb">If true, "climb up" the directory structure 
            looking for <paramref name="folderName"/>. If false, only check in
            <paramref name="startDirectory"/>.</param>
        </member>
        <member name="P:Zaber.PlugIns.FileFinder.Directory">
            <summary>
            Gets the directory that this finder is using.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.FindDefaultFile(Zaber.PlugIns.ScriptLanguage)">
            <summary>
            Find the default file in the folder.
            </summary>
            <param name="language">Specifies the file extensions you want to
            look for</param>
            <returns>The requested file or null if none could be found.</returns>
            <remarks>We look for files that are named Default.* where .* is one
            of the extensions supported by the language.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.FindFile(System.String)">
            <summary>
            Find the named file in the folder.
            </summary>
            <param name="fileName">The name of the file to find. It may contain wild cards.</param>
            <returns>The requested file, or null if it could not be found</returns>
            <remarks>We search the folder for the named file. If
            more than one file matches the request, the first one is returned.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.FileFinder.IsFindable(System.String)">
            <summary>
            Checks if a file could be found by this finder.
            </summary>
            <param name="fileName">The full path to the file.</param>
            <returns>True if the file is in the directory or one of
            its subdirectories, otherwise false.</returns>
        </member>
        <member name="T:Zaber.PlugIns.IFileFinder">
            <summary>
            Search features for files in a specific folder.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.IFileFinder.FindDefaultFile(Zaber.PlugIns.ScriptLanguage)">
            <summary>
            Find the default file in the folder.
            </summary>
            <param name="language">Specifies the file extensions you want to
            look for</param>
            <returns>The requested file or null if none could be found.</returns>
            <remarks>First, we find all files with an extension 
            supported by the language parameter. The default is determined using
            the first rule that applies:
            <list type="number">
            <item>If we only find one file, it's the default.</item>
            <item>If one of the files is named Default.*, it's the default.</item>
            <item>The file names are sorted alphabetically, and the first one 
            is the default.</item>
            </list></remarks>
        </member>
        <member name="M:Zaber.PlugIns.IFileFinder.FindFile(System.String)">
            <summary>
            Find the named file in the folder.
            </summary>
            <param name="fileName">The name of the file to find. It may contain wild cards.</param>
            <returns>The requested file, or null if it could not be found</returns>
            <remarks>We search the folder for the named file. If
            more than one file matches the request, the first one is returned.</remarks>
        </member>
        <member name="T:Zaber.PlugIns.IPlugIn">
            <summary>
            This is the interface implemented by plug ins and scripts that
            the script runner can execute.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.IPlugIn.Run">
            <summary>
            Run the plug in's operation.
            </summary>
            <remarks>
            The method returns when the operation has completed. Exceptions in the
            operation will be thrown from this method.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.IPlugIn.Cancel">
            <summary>
            Ask the operation to stop running.
            </summary>
            <remarks>
            <para>This is just a request, plug ins do not have to respect it. A common
            implementation is to set an IsCancelled flag and leave it up to
            the running code to check the flag at regular intervals.</para>
            <para>If a plug in does abort its operation it can either return
            normally, or throw an exception. 
            <see cref="T:System.OperationCanceledException"/> is a good exception
            to throw in this case.</para>
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.PortFacade">
            <summary>
            Gets or sets the port facade that gives access to all the devices 
            and conversations.
            </summary>
            <remarks>
            The port facade may or may not be open when it is passed to this 
            property. Scripts can check by using the 
            <see cref="P:Zaber.ZaberPortFacade.IsOpen"/> property.
            The plug in does not own this facade and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Conversation">
            <summary>
            Gets or sets the conversation that was selected by the user.
            </summary>
            <value>
            May be null if none was selected, or if the port hasn't been opened
            yet.
            </value>
            <remarks>
            The plug in does not own this conversation and will not dispose it 
            during Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Input">
            <summary>
            Gets or sets a text reader that will provide input to the script.
            </summary>
            <remarks>
            The plug in owns this reader and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.IPlugIn.Output">
            <summary>
            Gets or sets a text writer that will receive output from the script.
            </summary>
            <remarks>
            The plug in owns this writer and will dispose it during 
            Dispose().
            </remarks>
        </member>
        <member name="T:Zaber.PlugIns.PlugInBase">
            <summary>
            A basic implementation of the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface.
            </summary>
            <remarks>
            Plug ins and script templates do not have to derive from this base class!
            The only requirement is to implement the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface.
            This class just provides a simple implementation of all the required
            features except the <see cref="M:Zaber.PlugIns.PlugInBase.Run"/> method. It also implements helper
            methods like <see cref="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32)"/> and <see cref="M:Zaber.PlugIns.PlugInBase.CheckForCancellation"/>.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Run">
            <summary>
            Run the plug in's operation.
            </summary>
            <remarks>
            The method returns when the operation has completed. Exceptions in the
            operation will be thrown from this method.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Cancel">
            <summary>
            Ask the operation to stop running.
            </summary>
            <remarks>
            Sets the <see cref="P:Zaber.PlugIns.PlugInBase.IsCanceled"/> property to true. Derived 
            classes' <see cref="M:Zaber.PlugIns.PlugInBase.Run"/> methods can call 
            <see cref="M:Zaber.PlugIns.PlugInBase.CheckForCancellation"/> to throw an exception
            if the operation has been canceled.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Output">
            <summary>
            Gets or sets a text writer that will receive output from the script.
            </summary>
            <remarks>
            The plug in owns this writer and will dispose it during 
            <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Input">
            <summary>
            Gets or sets a text reader that will provide input to the script.
            </summary>
            <remarks>
            The plug in owns this reader and will dispose it during 
            <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Log(System.Object,System.Exception)">
            <summary>
            Write a message to the application log file.
            </summary>
            <param name="message">The object to write to the file.</param>
            <param name="exception">An exception to write to the log file,
            along with its stack trace.</param>
            <remarks>The message will be written to the application's log
            file at the Info level, coming from the Zaber.PlugIns.PlugInBase
            class.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Log(System.Object)">
            <summary>
            Write a message to the application log file.
            </summary>
            <param name="message">The object to write to the file.</param>
            <remarks>The message will be written to the application's log
            file at the Info level, coming from the Zaber.PlugIns.PlugInBase
            class.</remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.Conversation">
            <summary>
            Gets or sets the conversation that was selected by the user.
            </summary>
            <value>
            May be null if none was selected, or if the port hasn't been opened
            yet.
            </value>
            <remarks>
            The plug in does not own this conversation and will not dispose it 
            during <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.PortFacade">
            <summary>
            Gets or sets the port facade that gives access to all the devices 
            and conversations.
            </summary>
            <remarks>
            The port facade may or may not be open when it is passed to this 
            property. Scripts can check by using the 
            <see cref="P:Zaber.ZaberPortFacade.IsOpen"/> property.
            The plug in does not own this facade and will not dispose it 
            during <see cref="M:Zaber.PlugIns.PlugInBase.Dispose"/>.
            </remarks>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32)">
            <summary>
            Pause the operation for a number of milliseconds.
            </summary>
            <param name="milliseconds">The length of time to pause</param>
            <exception cref="T:System.OperationCanceledException">If the operation was 
            canceled before or during the sleep.</exception>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Sleep(System.Int32,Zaber.PlugIns.SleepCancellationResponse)">
            <summary>
            Pause the operation for a number of milliseconds.
            </summary>
            <param name="milliseconds">The length of time to pause</param>
            <param name="cancellationResponse">Specifies the desired response
            when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called before or during the sleep.</param>
            <exception cref="T:System.OperationCanceledException">If the operation was 
            canceled before or during the sleep.</exception>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.CheckForCancellation">
            <summary>
            Throw an exception if the operation has been canceled. Otherwise,
            do nothing.
            </summary>
            <exception cref="T:System.OperationCanceledException">The operation was
            canceled by a call to <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/></exception>
        </member>
        <member name="P:Zaber.PlugIns.PlugInBase.IsCanceled">
            <summary>
            A flag that is set to true when <see cref="M:Zaber.PlugIns.PlugInBase.Cancel"/> is called.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.PlugInBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="T:Zaber.PlugIns.CodeBuilder">
            <summary>
            Combines template code with a script's code to create source code for a
            class that can be compiled.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.ScriptReader">
            <summary>
            The input source for the script file that will be inserted into the template.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.TemplateReader">
            <summary>
            The input source for the template file that will be combined with the script.
            </summary>
            <remarks>
            The template is searched for the first line that contains the marker text
            $INSERT-SCRIPT-HERE$ and that entire line is replaced by the contents
            of the script.
            </remarks>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.TemplateName">
            <summary>
            Searches the script for a #template directive and returns the template name if it
            finds one. Returns null if no template is found.
            </summary>
            <example>
            If the script contains a line like this:
            #template(MyTemplate) x, y, z
            this will return "MyTemplate". Anything after the closing parenthesis is ignored
            and excluded from the script.
            </example>
        </member>
        <member name="P:Zaber.PlugIns.CodeBuilder.LineOffset">
            <summary>
            Returns the number of lines that were found in the template before 
            the marker text.
            </summary>
            <remarks>This is useful for translating line numbers from the 
            combined source code back to line numbers in the script.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.CodeBuilder.Build">
            <summary>
            Build the source code from the <see cref="P:Zaber.PlugIns.CodeBuilder.TemplateReader"/> and 
            <see cref="P:Zaber.PlugIns.CodeBuilder.ScriptReader"/>.
            </summary>
            <returns>The combined source code</returns>
        </member>
        <member name="T:Zaber.PlugIns.Script">
            <summary>
            Represents a script file with features for using templates and compiling.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.Script.#ctor(System.IO.FileInfo,Zaber.PlugIns.IFileFinder)">
            <summary>
            Create a new instance.
            </summary>
            <param name="file">The file to load the script from.</param>
            <param name="templateFinder">Used to find template files.</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.#ctor(Zaber.PlugIns.ScriptLanguage,Zaber.PlugIns.IFileFinder)">
            <summary>
            Create a new instance without a file.
            </summary>
            <param name="language">The language that this script will be written in.</param>
            <param name="templateFinder">Used to find template files.</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.FindTemplate(System.Boolean)">
            <summary>
            Find a template based on a #template declaration in the script text.
            </summary>
            <param name="shouldThrow">True if this should throw an exception
            when it can't find the file named by the #template declaration.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when it can't find the file 
            named by the #template declaration and shouldThrow is true.</exception>
        </member>
        <member name="M:Zaber.PlugIns.Script.IsTemplateLoaded(System.String)">
            <summary>
            Determines whether the currently-loaded template's name matches
            the specified string.
            </summary>
            <param name="templateName">The name of the template.</param>
            <returns>True if the template is loaded, false otherwise.</returns>
        </member>
        <member name="P:Zaber.PlugIns.Script.File">
            <summary>
            The file this script was loaded from. May be null.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Template">
            <summary>
            The template referenced by the script file. If there is no template
            declaration in the script file, then this will still return a valid
            template, but the template will have empty text and a null file.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Text">
            <summary>
            The text from the script file.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.IsDirty">
            <summary>
            True if the text has been changed since the script was loaded or saved.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.Script.Language">
            <summary>
            The .NET language that the script will be compiled with.
            </summary>
            <remarks>The choice is based on the script file's extension.</remarks>
        </member>
        <member name="P:Zaber.PlugIns.Script.CompilerErrors">
            <summary>
            Gets the compiler errors that were generated during <see cref="M:Zaber.PlugIns.Script.Build"/>
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.Script.Save">
            <summary>
            Write the current script text back to the file it was loaded from.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.Script.SaveAs(System.IO.FileInfo)">
            <summary>
            Write the current script text to a new file.
            </summary>
            <param name="newFile">The file to write the script to</param>
        </member>
        <member name="M:Zaber.PlugIns.Script.Build">
            <summary>
            Compile a plug in assembly and find the plug in class within it.
            </summary>
            <returns>An instance of the plug in class</returns>
            <remarks>This takes the script's source code and compiles it in memory to 
            an assembly. It then searches the assembly for a class that 
            implements the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface. It creates an 
            instance and returns it.</remarks>
            <exception cref="T:Zaber.PlugIns.CompilerException">The compiler generated errors.
            The error details can be found in the <see cref="P:Zaber.PlugIns.Script.CompilerErrors"/> 
            property. Compiler warnings do not cause the exception, but they
            can also be found in the <see cref="P:Zaber.PlugIns.Script.CompilerErrors"/> property.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The #template declaration
            in the script did not match any template file names.</exception>
        </member>
        <member name="T:Zaber.PlugIns.CompilerException">
            <summary>
            Thrown when a script or plug-in could not be compiled.
            </summary>
            <remarks>This exception wraps an inner exception. Use the
            InnerException property to access it.</remarks>
        </member>
        <member name="M:Zaber.PlugIns.CompilerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the CompilerException class.
            </summary>
            <param name="message">A message associated with the error.</param>
            <param name="innerException">The exception which caused the error.
            </param>
        </member>
        <member name="T:Zaber.PlugIns.ScriptCompiler">
            <summary>
            Compiles a plug in assembly in memory from source code.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptCompiler.#ctor(System.CodeDom.Compiler.CompilerInfo)">
            <summary>
            Create a new instance
            </summary>
            <param name="compilerInfo">The language compiler to use.</param>
        </member>
        <member name="M:Zaber.PlugIns.ScriptCompiler.Compile(System.String)">
            <summary>
            Compile a plug in assembly and find the plug in class within it.
            </summary>
            <param name="sourceCode">The source code for the plug in class</param>
            <returns>An instance of the plug in class</returns>
            <remarks>This takes the source code and compiles it in memory to 
            an assembly. It then searches the assembly for a class that 
            implements the <see cref="T:Zaber.PlugIns.IPlugIn"/> interface. It creates an 
            instance and returns it.</remarks>
            <exception cref="T:System.ArgumentException">The compiler generated errors.
            The error details can be found in the <see cref="P:Zaber.PlugIns.ScriptCompiler.Errors"/> 
            property. Compiler warnings do not cause the exception, but they
            can also be found in the <see cref="P:Zaber.PlugIns.ScriptCompiler.Errors"/> property.
            </exception>
        </member>
        <member name="P:Zaber.PlugIns.ScriptCompiler.Errors">
            <summary>
            Compiler errors and warnings generated by the last call to 
            <see cref="M:Zaber.PlugIns.ScriptCompiler.Compile(System.String)"/>.
            </summary>
        </member>
        <member name="T:Zaber.PlugIns.ScriptLanguage">
            <summary>
            Represents a language compiler that can be used for scripting.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.LoadDynamicExtensions">
            <summary>
            Load the dynamic language extensions map.
            </summary>
            <returns>A mapping from file extensions to the languages that use 
            them.</returns>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.PickName(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Select the best language name to display.
            </summary>
            <param name="languageNames">Possible names for this language.</param>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.FindAll">
            <summary>
            Find all languages installed on this computer.
            </summary>
            <returns>A collection of <see cref="T:Zaber.PlugIns.ScriptLanguage"/> objects.</returns>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.LoadPython">
            <summary>
            Try to load the Python language if the necessary dlls are present.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.Name">
            <summary>
            The name of this language
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.FileFilter">
            <summary>
            A file filter for use with file dialogs.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.UniqueExtensions">
            <summary>
            Get a list of the file extensions this language supports.
            </summary>
            <returns>A collection of strings. The strings do not start with a 
            period.</returns>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.CreatePlugIn(System.String)">
            <summary>
            Convert a script to a plug in that can be executed.
            </summary>
            <param name="sourceCode">The source code for the script.</param>
            <returns>The plug in that can be executed.</returns>
            <exception cref="T:System.ArgumentException">The compiler generated errors.
            The error details can be found in the <see cref="P:Zaber.PlugIns.ScriptLanguage.CompilerErrors"/>
            property. Compiler warnings do not cause the exception, but they
            can also be found in the <see cref="P:Zaber.PlugIns.ScriptLanguage.CompilerErrors"/> property.
            </exception>
        </member>
        <member name="P:Zaber.PlugIns.ScriptLanguage.CompilerErrors">
            <summary>
            Gets a collection of compiler errors from the last call to 
            <see cref="M:Zaber.PlugIns.ScriptLanguage.CreatePlugIn(System.String)"/>.
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptLanguage.FindByExtension(System.IO.FileInfo)">
            <summary>
            Find the scripting language that compiles a given file type.
            </summary>
            <param name="file">The file whose extension will be used.</param>
            <returns>The scripting language that compiles the file type.</returns>
        </member>
        <member name="T:Zaber.PlugIns.ScriptTemplate">
            <summary>
            Holds the details about a script template
            </summary>
        </member>
        <member name="M:Zaber.PlugIns.ScriptTemplate.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance.
            </summary>
            <param name="file">The file to read the template text from. Null is
                equivalent to an empty file.</param>
        </member>
        <member name="P:Zaber.PlugIns.ScriptTemplate.File">
            <summary>
            The file that the template text came from.
            </summary>
        </member>
        <member name="P:Zaber.PlugIns.ScriptTemplate.Text">
            <summary>
            Get the text from the template file.
            </summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the 
                required permission to read the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The path is a directory.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, 
                such as being on an unmapped drive.</exception>
        </member>
        <member name="T:Zaber.RequestCanceledException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            a request is canceled by another thread.
            </summary>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestCanceledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.ConversionTable">
            <summary>
            Record ratios for converting between different units of measure.
            </summary>
            <remarks>
            As well as the usual conversion ratio, you can also include the step
            size of a Zaber device in the conversions.
            </remarks>
        </member>
        <member name="F:Zaber.ConversionTable.LinearPosition">
            <summary>
            A conversion table that contains all the known linear position 
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.RotaryPosition">
            <summary>
            A conversion table that contains all the known linear position 
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.LinearVelocity">
            <summary>
            A conversion table that contains all the known linear velocity
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.RotaryVelocity">
            <summary>
            A conversion table that contains all the known rotary velocity
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.LinearAcceleration">
            <summary>
            A conversion table that contains all the known linear acceleration
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.RotaryAcceleration">
            <summary>
            A conversion table that contains all the known rotary acceleration
            units of measure.
            </summary>
        </member>
        <member name="F:Zaber.ConversionTable.ElectricalCurrent">
            <summary>
            A conversion table that converts between amps and milliamps.
            </summary>
        </member>
        <member name="M:Zaber.ConversionTable.#ctor">
            <summary>
            Initialize a new, empty conversion table.
            </summary>
        </member>
        <member name="M:Zaber.ConversionTable.#ctor(Zaber.UnitOfMeasure)">
            <summary>
            Initialize a new conversion table with only one unit in it.
            </summary>
            <param name="unit">The unit of measure to put in the table.</param>
        </member>
        <member name="M:Zaber.ConversionTable.#ctor(Zaber.ConversionTable,Zaber.UnitOfMeasure[])">
            <summary>
            Initialize a new conversion table by copying another table, and
            mapping all the units of the old table to new units while keeping
            all the conversion ratios intact.
            </summary>
            <param name="source">The table to copy</param>
            <param name="unitMap">Pairs of units with the old unit followed by
            the new unit</param>
            <remarks>For example, this could be used to generate a conversion
            table for velocities with the same ratios as the positions. You
            could pass the units like this: mm, mm/s, in, in/s.</remarks>
        </member>
        <member name="M:Zaber.ConversionTable.#ctor(Zaber.ConversionTable,Zaber.UnitOfMeasure,Zaber.UnitOfMeasure,System.Decimal)">
            <summary>
            Initialize a new conversion table by copying another table, then
            adding new conversions.
            </summary>
            <param name="source">The table to copy.</param>
            <param name="fromUnit">The unit of measure to convert from.</param>
            <param name="toUnit">The unit of measure to convert to.</param>
            <param name="ratio">One from unit is equal to this many to 
            units.</param>
        </member>
        <member name="M:Zaber.ConversionTable.CopyRatios(Zaber.ConversionTable,System.Int32,System.Int32,System.Decimal)">
            <summary>
            Copy the ratios from the source table, and add any new conversions.
            </summary>
            <param name="source">The table to copy from.</param>
            <param name="fromIndex">The index of the from unit in the new 
            table.</param>
            <param name="toIndex">The index of the to unit in the new 
            table.</param>
            <param name="ratio">One from unit is equal to this many to 
            units.</param>
        </member>
        <member name="M:Zaber.ConversionTable.AddConversion(Zaber.UnitOfMeasure,Zaber.UnitOfMeasure,System.Decimal)">
            <summary>
            Create a new conversion table with a conversion added between two 
            units of measure.
            </summary>
            <param name="fromUnit">The unit to convert from.</param>
            <param name="toUnit">The unit to convert to.</param>
            <param name="ratio">Multiply one fromUnit by this ratio to convert
            it to toUnits.</param>
            <example>
            <code>
            conversionTable.AddConversion(inch, mm, 25.4);
            </code>
            <remarks>One inch is equal to 25.4 mm.</remarks>
            </example>
            <returns>A new conversion table with the conversion added.</returns>
        </member>
        <member name="M:Zaber.ConversionTable.Convert(Zaber.Measurement,Zaber.UnitOfMeasure)">
            <summary>
            Convert a measurement to another unit of measure.
            </summary>
            <param name="from">The existing measurement.</param>
            <param name="toUnit">The unit of measure to convert it to.</param>
            <returns>A new measurement with the requested unit of 
            measure.</returns>
            <exception cref="T:System.ArgumentException">If either unit of measure 
            isn't in the table.</exception>
        </member>
        <member name="P:Zaber.ConversionTable.UnitsOfMeasure">
            <summary>
            Gets an unsorted list of the units of measure used in this table.
            </summary>
        </member>
        <member name="M:Zaber.ConversionTable.ToString">
            <summary>
            Returns a System.String that represents the conversion table.
            </summary>
            <returns>A System.String that represents the unit of measure 
            abbreviations in this conversion table.</returns>
        </member>
        <member name="T:Zaber.ScalingFunction">
            <summary>
            Describes scaling functions which are to be applied to convert between
            real-life units of measure and Zaber device data units.
            </summary>
        </member>
        <member name="F:Zaber.ScalingFunction.Linear">
            <summary>
            Device units = scale * physical units.
            </summary>
        </member>
        <member name="F:Zaber.ScalingFunction.Reciprocal">
            <summary>
            Device units = scale / physical units.
            </summary>
        </member>
        <member name="F:Zaber.ScalingFunction.LinearResolution">
            <summary>
            Device units = scale * resolution * physical units.
            </summary>
        </member>
        <member name="F:Zaber.ScalingFunction.TangentialResolution">
            <summary>
            Device units = scale * resolution * tan(physical units * Pi / 180)
            </summary>
            <remarks>Warning: This formula can only be applied to absolute 
            positions. It is not applicable to relative positions, velocities,
            or accelerations.</remarks>
        </member>
        <member name="T:Zaber.StreamExtensions">
            <summary>
            Helpers for working with streams and binary data. Used by some plugins.
            </summary>
        </member>
        <member name="T:Zaber.StreamExtensions.Endianness">
            <summary>
            Flag to repesent file endianness of multi-byte values.
            </summary>
        </member>
        <member name="F:Zaber.StreamExtensions.Endianness.Little">
            <summary>
            Value is stored little-endian (LSB first) in a stream.
            </summary>
        </member>
        <member name="F:Zaber.StreamExtensions.Endianness.Big">
            <summary>
            Value is stored big-endian (MSB first) in a stream.
            </summary>
        </member>
        <member name="M:Zaber.StreamExtensions.ReadUInt16(System.IO.Stream,Zaber.StreamExtensions.Endianness)">
            <summary>
            Read a 16-bit unsigned integer from a stream, endian-swapping if necessary to host order.
            </summary>
            <comments>Updates the current position of the stream read pointer by two bytes.</comments>
            <param name="aStream">The stream to read from.</param>
            <param name="aEndianness">The endianness of the value's representation in the stream.</param>
            <returns>The value read from 2 bytes at the current position in the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The read attempt would pass the end of the input stream.</exception>
        </member>
        <member name="M:Zaber.StreamExtensions.ReadUInt32(System.IO.Stream,Zaber.StreamExtensions.Endianness)">
            <summary>
            Read a 32-bit unsigned integer from a stream, endian-swapping if necessary to host order.
            </summary>
            <comments>Updates the current position of the stream read pointer by four bytes.</comments>
            <param name="aStream">The stream to read from.</param>
            <param name="aEndianness">The endianness of the value's representation in the stream.</param>
            <returns>The value read from 4 bytes at the current position in the stream.</returns>
            <exception cref="T:System.IO.EndOfStreamException">The read attempt would pass the end of the input stream.</exception>
        </member>
        <member name="M:Zaber.StreamExtensions.ReadBlocking(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extension to Stream.Read() that blocks until all of the requested data is read from the stream.
            </summary>
            <param name="aStream">The stream to read from.</param>
            <param name="aOutput">Buffer to read to.</param>
            <param name="aPosition">Index within the buffer to start writing bytes.</param>
            <param name="aLength">Number of bytes to transfer from the stream to the buffer.</param>
            <exception cref="T:System.IO.EndOfStreamException">The read attempt would pass the end of the input stream.</exception>
        </member>
        <member name="T:Zaber.UnitOfMeasure">
            <summary>
            Describes a unit of measure used for converting measurements.
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Data">
            <summary>
            Raw data value for any command.
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MicrostepsPerSecondSquared">
            <summary>
            Measures acceleration in microsteps per second squared
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MicrometersPerSecondSquared">
            <summary>
            Measures acceleration in µm/s²
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MillimetersPerSecondSquared">
            <summary>
            Measures acceleration in mm/s²
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MetersPerSecondSquared">
            <summary>
            Measures acceleration in m/s²
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.InchesPerSecondSquared">
            <summary>
            Measures acceleration in inches per second squared
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.DegreesPerSecondSquared">
            <summary>
            Measures rotary acceleration in degrees per second squared
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.RadiansPerSecondSquared">
            <summary>
            Measures rotary acceleration in radians per second squared
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MicrostepsPerSecond">
            <summary>
            Measures velocity in microsteps per second
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MicrometersPerSecond">
            <summary>
            Measures velocity in µm/s
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MillimetersPerSecond">
            <summary>
            Measures velocity in mm/s
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.MetersPerSecond">
            <summary>
            Measures velocity in m/s
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.InchesPerSecond">
            <summary>
            Measures velocity in inches per second
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.DegreesPerSecond">
            <summary>
            Measures rotary velocity in degrees per second
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.RadiansPerSecond">
            <summary>
            Measures rotary velocity in radians per second
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.RevolutionsPerMinute">
            <summary>
            Measures rotary velocity in revolutions per minute
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Micrometer">
            <summary>
            Measures position in micrometers
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Millimeter">
            <summary>
            Measures position in millimeters
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Meter">
            <summary>
            Measures position in metres.
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Inch">
            <summary>
            Measures position in inches
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Degree">
            <summary>
            Measures rotary position in degrees
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Radian">
            <summary>
            Measures rotary position in radians
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Revolution">
            <summary>
            Measures rotary position in revolutions
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Amperes">
            <summary>
            Measures current in (peak) amperes.
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Milliamperes">
            <summary>
            Measures current in (peak) milliamperes.
            </summary>
        </member>
        <member name="F:Zaber.UnitOfMeasure.Percent">
            <summary>
            Measures current as a percentage of total available current.
            </summary>
        </member>
        <member name="M:Zaber.UnitOfMeasure.#ctor(System.String,Zaber.MeasurementType,Zaber.MotionType,Zaber.UnitOfMeasure)">
            <summary>
            Initialize a new unit of measure object.
            </summary>
            <param name="abbreviation">Describes the unit of measure.</param>
            <param name="measurementType">The type of measurement the unit
            represents.</param>
            <param name="motionType">The type of motion the unit represents.</param>
            <param name="derivative">The derivative for this unit of measure.
            </param>
        </member>
        <member name="P:Zaber.UnitOfMeasure.Abbreviation">
            <summary>
            Get an abbreviation describing the unit of measure.
            </summary>
        </member>
        <member name="P:Zaber.UnitOfMeasure.Derivative">
            <summary>
            The related unit of measure in the next measurement type.
            </summary>
            <remarks>The derivative of position is velocity, and the 
            derivative of velocity is acceleration.</remarks>
        </member>
        <member name="P:Zaber.UnitOfMeasure.MotionType">
            <summary>
            The type of motion that the unit describes.
            </summary>
            <remarks>For example, "metres", "metres per second", and "metres
            per second squared" all describe linear motions. "Degrees" is a 
            rotary motion. "Amperes" are not a measure of motion at all, and
            so are marked as "MotionType.Other".</remarks>
        </member>
        <member name="P:Zaber.UnitOfMeasure.MeasurementType">
            <summary>
            The type of measurement represented by the unit.
            </summary>
        </member>
        <member name="M:Zaber.UnitOfMeasure.ToString">
            <summary>
            Create a string representation of the unit of measure.
            </summary>
            <returns>The abbreviation for this unit of measure.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.Equals(System.Object)">
            <summary>
            Determines whether this instance and another object have the same 
            value.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the other object has the same abbreviation.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.op_Equality(Zaber.UnitOfMeasure,Zaber.UnitOfMeasure)">
            <summary>
            Determines whether two units of measure have the same 
            values.
            </summary>
            <param name="first">One unit of measure to compare.</param>
            <param name="second">The other unit of measure.</param>
            <returns>True if the two objects have the same abbreviation.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.op_Inequality(Zaber.UnitOfMeasure,Zaber.UnitOfMeasure)">
            <summary>
            Determines whether two units of measure have different
            values.
            </summary>
            <param name="first">One unit of measure to compare.</param>
            <param name="second">The other unit of measure.</param>
            <returns>True if the two objects have different abbreviations.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.op_LessThan(Zaber.UnitOfMeasure,Zaber.UnitOfMeasure)">
            <summary>
            Determines the order of two units of measure.
            </summary>
            <param name="first">One unit of measure to compare.</param>
            <param name="second">The other unit of measure.</param>
            <returns>True if the first objects precedes the other.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.op_GreaterThan(Zaber.UnitOfMeasure,Zaber.UnitOfMeasure)">
            <summary>
            Determines the order of two units of measure.
            </summary>
            <param name="first">One unit of measure to compare.</param>
            <param name="second">The other unit of measure.</param>
            <returns>True if the first objects follows the other.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Zaber.UnitOfMeasure.CompareTo(Zaber.UnitOfMeasure)">
            <summary>
            Compares this instance with another UnitOfMeasure object and 
            indicates whether this instance precedes, follows, or appears in 
            the same position in the sort order as other object.
            </summary>
            <param name="other">The object to compare to.</param>
            <returns>A 32-bit signed integer that indicates whether this 
            instance precedes, follows, or appears in the same position in the 
            sort order as the value parameter. Less than zero if this instance 
            precedes other. Zero if this instance has the same position in the 
            sort order as other. Greater than zero if this instance follows 
            other or other is null.</returns>
        </member>
        <member name="T:Zaber.ZaberError">
            <summary>
            Named constants for the error codes that Zaber devices will return.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.None">
            <summary>
            No error has occurred.
            </summary>
            <remarks>
            This should never be returned by a device. It's only useful as a 
            default value in code.
            </remarks>
        </member>
        <member name="F:Zaber.ZaberError.CannotHome">
            <summary>
            Home - Device has traveled a long distance without triggering the home sensor. Device may be stalling or slipping.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceNumberInvalid">
            <summary>
            Renumbering data out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AddressInvalid">
            <summary>
            Read Register - Register address invalid.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VoltageLow">
            <summary>
            Power supply voltage too low.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VoltageHigh">
            <summary>
            Power supply voltage too high.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.StoredPositionInvalid">
            <summary>
            The position stored in the requested register is no longer valid. This is probably because the maximum range was reduced.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AbsolutePositionInvalid">
            <summary>
            Move Absolute - Target position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RelativePositionInvalid">
            <summary>
            Move Relative - Target position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityInvalid">
            <summary>
            Constant velocity move. Velocity out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AxisInvalid">
            <summary>
            Set Active Axis - Data out of range. Must be 1, 2, or 3.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AxisDeviceNumberInvalid">
            <summary>
            Set Axis Device Number - Data out of range. Must be between 0 and 254 inclusive.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.InversionInvalid">
            <summary>
            Set Axis Inversion - Data out of range. Must be 0, 1, or -1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityProfileInvalid">
            <summary>
            Set Axis Velocity Profile - Data out of range. Must be 0, 1, 2, or 3.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.VelocityScaleInvalid">
            <summary>
            Set Axis Velocity Scale - Data out of range. Must be between 0 and 65535.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.LoadEventInvalid">
            <summary>
            Load Event-Triggered Instruction - Data out of range. See command #30 for valid range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ReturnEventInvalid">
            <summary>
            Return Event-Triggered Instruction - Data out of range. See command #31 and #30 for valid range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CalibrationModeInvalid">
            <summary>
            Must be 0, 1, or 2.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.PeripheralIdInvalid">
            <summary>
            Peripheral Id is invalid or not supported.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ResolutionInvalid">
            <summary>
            Microstep resolution not supported.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RunCurrentInvalid">
            <summary>
            Run current out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HoldCurrentInvalid">
            <summary>
            Hold current out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ModeInvalid">
            <summary>
            Set Device Mode - one or more of the mode bits is invalid.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeSpeedInvalid">
            <summary>
            Home speed out of range. The range of home speed is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SpeedInvalid">
            <summary>
            Target speed out of range. The range of target speed is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AccelerationInvalid">
            <summary>
            Target acceleration out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MaximumPositionInvalid">
            <summary>
            Maximum position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MaximumRangeInvalid">
            <summary>
            Identical to MaximumPositionInvalid, this is just for backward 
            compatibility. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CurrentPositionInvalid">
            <summary>
            Current position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MaximumRelativeMoveInvalid">
            <summary>
            Max relative move out of range. Must be between 0 and 16,777,215.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.OffsetInvalid">
            <summary>
            Home offset out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AliasInvalid">
            <summary>
            Alias out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.LockStateInvalid">
            <summary>
            Lock state must be 1 (locked) or 0 (unlocked).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceIdUnknown">
            <summary>
            The device id is not included in the firmware's list.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SettingInvalid">
            <summary>
            Return Setting - data entered is not a valid setting command number. Valid data are the command numbers of any "Set..." or "Return..." instructions.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.CommandInvalid">
            <summary>
            Command number not valid in this firmware version.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ParkStateInvalid">
            <summary>
            Set Park State - State must be 0 or 1, or device cannot park because it is in motion.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.TemperatureHigh">
            <summary>
            High temperature is detected inside device. Device may be overheating.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AutoReplyDisabledModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MessageIdModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeStatusInvalid">
            <summary>
            Status must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeSensorTypeInvalid">
            <summary>
            Type must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AutoHomeDisabledModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MinimumPositionInvalid">
            <summary>
            Minimum position out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.KnobDisabledModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.KnobDirectionInvalid">
            <summary>
            Direction must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.KnobMovementModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.KnobVelocityScaleInvalid">
            <summary>
            Maximum knob speed out of range. The range of valid speed is determined by the resolution.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.KnobVelocityProfileInvalid">
            <summary>
            Profile must be 1 (Linear), 2 (Quadratic), or 3 (Cubic).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.AccelerationOnlyInvalid">
            <summary>
            Acceleration out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DecelerationOnlyInvalid">
            <summary>
            Deceleration out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MoveTrackingModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ManualMoveTrackingDisabledModeInvalid">
            <summary>
            Mode must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MoveTrackingPeriodInvalid">
            <summary>
            Valid range is 10 - 65535.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ClosedLoopModeInvalid">
            <summary>
            Valid modes are 0-6.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SlipTrackingPeriodInvalid">
            <summary>
            Valid range is 0(Off), 10 - 65535.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.StallTimeoutInvalid">
            <summary>
            Valid range is 0 - 65535.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceDirectionInvalid">
            <summary>
            Direction must be 0 or 1.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.BaudrateInvalid">
            <summary>
            Set Baudrate - Value not supported.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ProtocolInvalid">
            <summary>
            Set Protocol - Value not supported.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.BaudrateOrProtocolInvalid">
            <summary>
            Set Baudrate and ASCII Protocol - Value not supported.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Busy">
            <summary>
            Another command is executing and cannot be pre-empted. Either stop the previous command or wait until it finishes before trying again.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RegisterAddressInvalid">
            <summary>
            Write Register - Register address invalid.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RegisterValueInvalid">
            <summary>
            Write Register - Value out of range.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SavePositionInvalid">
            <summary>
            Save Current Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SavePositionNotHomed">
            <summary>
            Save Current Position is not allowed unless the device has been homed.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.ReturnPositionInvalid">
            <summary>
            Return Stored Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MovePositionInvalid">
            <summary>
            Move to Stored Position register out of range (must be 0-15).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.MovePositionNotHomed">
            <summary>
            Move to Stored Position is not allowed unless the device has been homed.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.RelativePositionLimited">
            <summary>
            Move Relative (command 20) exceeded maximum relative move range. Either move a shorter distance, or change the maximum relative move (command 46).
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.SettingsLocked">
            <summary>
            Must clear Lock State (command 49) first. See the Set Lock State command for details.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit1Invalid">
            <summary>
            Set Device Mode - bit 1 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit2Invalid">
            <summary>
            Set Device Mode - bit 2 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DisableAutoHomeInvalid">
            <summary>
            Set Device Mode - this is a linear actuator; Disable Auto Home is used for rotary actuators only.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit10Invalid">
            <summary>
            Set Device Mode - bit 10 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit11Invalid">
            <summary>
            Set Device Mode - bit 11 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.HomeSwitchInvalid">
            <summary>
            Set Device Mode - this device has integrated home sensor with preset polarity; mode bit 12 cannot be changed by the user.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit13Invalid">
            <summary>
            Set Device Mode - bit 13 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit14Invalid">
            <summary>
            Set Device Mode - bit 14 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.Bit15Invalid">
            <summary>
            Set Device Mode - bit 15 is reserved in this device and must be 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberError.DeviceParked">
            <summary>
            Device is currently parked. Use Set Park State or Home to unpark device before requesting a move.
            </summary>
        </member>
        <member name="T:Zaber.RequestTimeoutException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            no response is received within the time limit.
            </summary>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.RequestCollectionException">
            <summary>
            Exception thrown by a <see cref="T:Zaber.ConversationCollection"/> when some
            requests in the list fail.
            </summary>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.#ctor(System.Collections.Generic.ICollection{Zaber.ConversationTopic})">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="topics">All the topics used in the request, including 
            the one or ones that caused the exception</param>
        </member>
        <member name="M:Zaber.RequestCollectionException.BuildMessage(System.Collections.Generic.ICollection{Zaber.ConversationTopic})">
            <summary>
            Builds a text message that describes why some requests failed.
            </summary>
            <param name="topics">The topics to validate.</param>
            <returns>A text message if some topics were invalid, 
            otherwise an empty string.</returns>
        </member>
        <member name="P:Zaber.RequestCollectionException.Topics">
            <summary>
            All the topics used in the request, including 
            the one or ones that caused the exception.
            </summary>
        </member>
        <member name="M:Zaber.RequestCollectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.ErrorResponseException">
            <summary>
            Exception thrown by a <see cref="T:Zaber.Conversation"/> when the response is
            an error.
            </summary>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this exception</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ErrorResponseException.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="response">The response that caused the exception</param>
        </member>
        <member name="P:Zaber.ErrorResponseException.Response">
            <summary>
            The response message from the device.
            </summary>
        </member>
        <member name="M:Zaber.ErrorResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.DeviceMessage">
            <summary>
            A device message is a <see cref="T:Zaber.DataPacket"/> with some added information.
            </summary>
            <remarks>
            When a <see cref="T:Zaber.ZaberDevice"/> receives a response from the port, it
            adds context details before raising its own event.
            </remarks>
        </member>
        <member name="M:Zaber.DeviceMessage.#ctor(System.String)">
            <summary>
            Parse a text message into a device message.
            </summary>
            <param name="text">parse details from this text</param>
        </member>
        <member name="M:Zaber.DeviceMessage.#ctor(Zaber.DataPacket)">
            <summary>
            Copy constructor that copies a DataPacket.
            </summary>
            <param name="source">copy details from this packet</param>
        </member>
        <member name="P:Zaber.DeviceMessage.CommandInfo">
            <summary>
            More details about the command specified in <see cref="T:Zaber.Command"/>.
            </summary>
            <value>
            May be null if the command is not recognized.
            </value>
        </member>
        <member name="P:Zaber.DeviceMessage.Request">
            <summary>
            Gets or sets the request message that generated this response.
            </summary>
            <remarks>This is only set on response messages, and only when
            the request is known.</remarks>
        </member>
        <member name="M:Zaber.DeviceMessage.FormatRequest">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            request.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="M:Zaber.DeviceMessage.FormatResponse">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            response.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="T:Zaber.DeviceMessageEventArgs">
            <summary>
            Notification of a request or response from a <see cref="T:Zaber.ZaberDevice"/>.
            </summary>
        </member>
        <member name="M:Zaber.DeviceMessageEventArgs.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="deviceMessage">See <see cref="P:Zaber.DeviceMessageEventArgs.DeviceMessage"/></param>
        </member>
        <member name="P:Zaber.DeviceMessageEventArgs.DeviceMessage">
            <summary>
            The details of the device's request or response.
            </summary>
        </member>
        <member name="T:Zaber.DeviceModes">
            <summary>
            Bits used to set the flags in the <see cref="F:Zaber.Command.SetDeviceMode"/>
            command.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.None">
            <summary>
            No modes are enabled
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableAutoReply">
            <summary>
            Disables ALL replies except those to "return" commands (commands 50 and higher).
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableAntiBacklashRoutine">
            <summary>
            Enables anti-backlash. On negative moves (retracting), the device 
            will overshoot the desired position by 640 microsteps (assuming 
            64 microsteps/step), reverse direction and approach the requested 
            position from below. On positive moves (extending), the device 
            behaves normally. Care must be taken not to crash the moving 
            payload into a fixed object due to the 640 microsteps overshoot on 
            negative moves.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableAntiSticktionRoutine">
            <summary>
            Enables the anti-sticktion routine. On moves less than 640 
            microsteps (assuming 64 microsteps/step), the device will first 
            retract to a position 640 microsteps less than the requested 
            position and approach the requested position from below. Care must 
            be taken not to crash the moving payload into a fixed object due 
            to the 640 microsteps negative move.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisablePotentiometer">
            <summary>
            Disables the potentiometer preventing manual adjustment of the device.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableMoveTracking">
            <summary>
            Enables the Move Tracking response during move commands. The device
            will return its position periodically when a move
            command is executed. The Disable Auto-Reply option above takes 
            precedence over this option. The default is off on all devices.
            Before firmware version 5.14, only Move at Constant Speed commands 
            could generate tracking responses, now all move commands can.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableManualMoveTracking">
            <summary>
            Disables the Manual Move Tracking response during manual moves. The 
            Disable Auto-Reply option above takes precedence over this option.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableMessageIdsMode">
            <summary>
            Enables the Message Ids Mode. In this mode of communication, only 
            bytes 3 thru 5 are used for data. Byte 6 is used as an ID byte 
            that the user can set to any value they wish. It will be returned 
            unchanged in the reply. Logic Channel Mode allows the user 
            application to monitor communication packets individually to 
            implement error detection and recovery.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.HomeStatus">
            <summary>
            This bit is set to 0 automatically on power-up or reset. It is set 
            automatically when the device is homed or when the position is set 
            using command #45. It can be used to detect if a unit has a valid 
            position reference. It can also be set or cleared by the user.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableAutoHome">
            <summary>
            Disables auto-home checking. Checking for trigger of home sensor 
            is only done when home command is issued. This allows rotational 
            devices to move multiple revolutions without retriggering the 
            home sensor.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.EnableCircularPhaseMicrostepping">
            <summary>
            Enables circular phase micro-stepping mode. Square phase 
            micro-stepping is employed by default. See your user manual or the
            wiki for the differences.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.SetHomeSwitchLogic">
            <summary>
            Some devices have active high home limit switches. A value of 1 
            must be set for these devices for the device to home properly. On 
            devices with built in motors and home sensors, the factory default 
            settings will be correct. However, some devices, such as the T-CD 
            series can accept a variety of motors and home sensors. On these 
            devices, this bit may need to be changed from the default setting 
            in order for the home sensor to function correctly. See the 
            recommended settings for your particular device. Damage to the 
            home sensor or actuator may result if this bit is set improperly.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisablePowerLed">
            <summary>
            Turns off the green power LED. It will still blink briefly, 
            immediately after powerup.
            </summary>
        </member>
        <member name="F:Zaber.DeviceModes.DisableSerialLed">
            <summary>
            Turns off the yellow serial LED.
            </summary>
        </member>
        <member name="T:Zaber.RequestReplacedException">
            <summary>
            This exception is thrown by a <see cref="T:Zaber.Conversation"/> when
            a request gets replaced before responding.
            </summary>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.RequestReplacedException.#ctor(Zaber.DeviceMessage)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="replacementResponse">The response that replaced the expected one.</param>
        </member>
        <member name="P:Zaber.RequestReplacedException.ReplacementResponse">
            <summary>
            The response to the command that replaced the current command.
            </summary>
        </member>
        <member name="M:Zaber.RequestReplacedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.ResponseInfo">
            <summary>
            Descriptive information about a command that Zaber devices support.
            </summary>
            <remarks>This class is specific to response-only commands.</remarks>
        </member>
        <member name="P:Zaber.ResponseInfo.IsResponseOnly">
            <summary>
            Response-only commands are never sent to the devices. They come back as
            responses. The error response is a good example.
            </summary>
        </member>
        <member name="M:Zaber.ResponseInfo.Clone">
            <summary>
            Create a deep copy of the ResponseInfo.
            </summary>
            <returns>A new instance of ResponseInfo (as CommandInfo) with all the same property values as the instance invoked on.</returns>
        </member>
        <member name="T:Zaber.ReadOnlySettingInfo">
            <summary>
            Descriptive information about a read-only setting that Zaber devices 
            support.
            </summary>
            <remarks>This class is specific to commands that return the value of a 
            read-only device setting.</remarks>
        </member>
        <member name="P:Zaber.ReadOnlySettingInfo.IsReadOnlySetting">
            <summary>
            Is this command actually a read-only setting?
            </summary>
            <remarks>
            Read-only settings are read differently from other settings. Just
            send the command and the value will be returned.
            </remarks>
        </member>
        <member name="M:Zaber.ReadOnlySettingInfo.Clone">
            <summary>
            Create a deep copy of the SettingInfo.
            </summary>
            <returns>A new instance of SettingInfo (as CommandInfo) with all the same property values as the instance invoked on.</returns>
        </member>
        <member name="T:Zaber.SettingInfo">
            <summary>
            Descriptive information about a setting that Zaber devices support.
            </summary>
            <remarks>This class is specific to commands that read or adjust a 
            device setting.</remarks>
        </member>
        <member name="M:Zaber.SettingInfo.#ctor">
            <summary>
            Initializes a new instance of SettingInfo to default values.
            </summary>
        </member>
        <member name="P:Zaber.SettingInfo.IsSetting">
            <summary>
            Is this command actually a setting that can also be retrieved?
            </summary>
            <remarks>
            A setting's value is set by sending the command with the new
            value as the data. A setting's value is read by sending the
            <see cref="F:Zaber.Command.ReturnSetting"/> command with the setting's
            command number as the data.
            </remarks>
        </member>
        <member name="P:Zaber.SettingInfo.ReadAccessLevel">
            <summary>
            Gets or sets the read access level of this setting. This value,
            incombination with the current access level of the device,
            determines whether the setting is readable by the user.
            Defaults to zero. Normally one for common settings.
            </summary>
            <remarks>Typically, settingss with a value greater than one are either 
            advanced settings or only kept for backward compatibility.</remarks>
        </member>
        <member name="M:Zaber.SettingInfo.Clone">
            <summary>
            Create a deep copy of the SettingInfo.
            </summary>
            <returns>A new instance of SettingInfo (as CommandInfo) with all the same property values as the instance invoked on.</returns>
        </member>
        <member name="M:Zaber.SettingInfo.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.SettingInfo.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.SettingInfo.CopyProperties(Zaber.SettingInfo,Zaber.SettingInfo)">
            <summary>
            Helper for Clone() that copies properties from one instance to another.
            Subclasses should invoke this to handle base class properties.
            </summary>
            <param name="aFrom">The instance to copy values from.</param>
            <param name="aTo">The instance to copy values to.</param>
        </member>
        <member name="T:Zaber.TimeoutTimer">
            <summary>
            This class is simply a wrapper around standard timing utilities.
            </summary>
            <remarks>
            This class allows you to write unit tests that replace the TimeoutTimer
            with a MockTimeoutTimer and then the unit test can make the timer time
            out on demand. You should copy the TimeoutTimer to your application
            and the MockTimeoutTimer to your test application.
            </remarks>
        </member>
        <member name="P:Zaber.TimeoutTimer.Timeout">
            <summary>
            The length of time in milliseconds before a timeout occurs, or
            or Timeout.Infinite (-1) to wait indefinitely.
            </summary>
        </member>
        <member name="M:Zaber.TimeoutTimer.Sleep">
            <summary>
            Sleep for the configured length of time. 
            </summary>
            <remarks>
            This is equivalent to
            Thread.Sleep(Timeout), but it allows you to write unit tests that make
            the timer sleep until the unit test tells it to wake up.
            </remarks>
        </member>
        <member name="M:Zaber.TimeoutTimer.WaitOne(System.Threading.WaitHandle)">
            <summary>
            Blocks the current thread until the WaitHandle receives a signal or the
            timer times out.
            </summary>
            <param name="waitHandle">The wait handle to block on.</param>
            <returns>true if the wait handle receives a signal; otherwise false.</returns>
            <remarks>
            This is equivalent to WaitHandle.WaitOne(Timeout), but it allows you
            to write unit tests that make the timer wait until the unit test
            tells it to time out.
            </remarks>
        </member>
        <member name="M:Zaber.TimeoutTimer.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.TimeoutTimer.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="T:Zaber.ZaberPortErrorException">
            <summary>
            Exception thrown when a <see cref="T:Zaber.Conversation"/>'s request is 
            interrupted by a <see cref="T:Zaber.ZaberPortError"/>.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="message">The message to display</param>
            <param name="ex">The exception that caused this one</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance with serialized
                data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.#ctor(Zaber.ZaberPortError)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorType">The type of error that caused this exception</param>
        </member>
        <member name="P:Zaber.ZaberPortErrorException.ErrorType">
            <summary>
            The type of error that caused the exception.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is a null reference.</exception>
        </member>
        <member name="T:Zaber.ZaberPortFacade">
            <summary>
            This is the main class that most applications will interact with. 
            </summary>
            <remarks>
            The standard pattern is:
            <list type="number">
            <item>Call <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/> and display them to the user.</item>
            <item>When the user picks one, pass it to <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/>.</item>
            <item>Either call <see cref="M:Zaber.ZaberPortFacade.GetDevice(System.Byte,System.Int32)"/> to get a specific 
            device, call <see cref="P:Zaber.ZaberPortFacade.Devices"/> to get the all of them, call 
            <see cref="M:Zaber.ZaberPortFacade.GetConversation(System.Byte,System.Int32)"/> to get a specific conversation,
            or call <see cref="P:Zaber.ZaberPortFacade.Conversations"/> to get all of them.</item>
            <item>Either make requests from conversations or send commands to 
            devices and register to receive the response events.</item>
            </list>
            See the ZaberDeviceDemo and ZaberConversationDemo projects for some
            example code.
            </remarks>
            <remarks>
            This class is sealed. It has not been designed for inheritance, and any
            class which extends this class should do so by composition ("has a")
            rather than inheritance ("is a").
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.AddDeviceType(Zaber.DeviceType)">
            <summary>
            Add a DeviceType to <see cref="P:Zaber.ZaberPortFacade.DeviceTypeMap"/>.
            </summary>
            <param name="value">The DeviceType to add.</param>
        </member>
        <member name="M:Zaber.ZaberPortFacade.ContainsConversation(System.Byte)">
            <summary>
            Check to see if there is a conversation with the given device number.
            </summary>
            <param name="deviceNumber">The number of the device whose
            conversation you want.</param>
            <returns>true if the conversation exists.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)">
            <summary>
            Check to see if there is a device with the given device number.
            </summary>
            <param name="deviceNumber">The number of the device you want.</param>
            <returns>true if the device exists.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetConversation(System.Byte,System.Int32)">
            <summary>
            Look up a conversation by device number and axis number.
            </summary>
            <param name="deviceNumber">The number of the device whose 
            conversation you want. Device number 0 or other alias numbers will
            return a ConversationCollection that represents all the devices
            using that alias number.
            </param>
            <param name="axisNumber">The number of the axis you want. Numbers
            1 through 9 will return individual axes, and 0 will return the main
            conversation.</param>
            <returns>The requested conversation.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no conversation has the 
            requested device number and axis number.</exception>
            <seealso cref="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)"/>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetConversationCollection(System.Byte)">
            <summary>
            Look up a conversation collection by device number.
            </summary>
            <param name="deviceNumber">The number of the device whose 
            conversation you want.</param>
            <returns>The conversation collection with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no conversation has the
            requested device number.</exception>
            <exception cref="T:System.InvalidCastException">If the conversation is a single
            conversation instead of a collection.</exception>
            <remarks>
            To avoid the exceptions, you can safely get a conversation collection
            as follows:
            <example>
            if (portFacade.ContainsDevice(deviceNumber))
            {
                ConversationCollection conversations =
                    portFacade.GetConversation(deviceNumber)
                    as ConversationCollection;
                if (conversations != null)
                {
                    // Use conversations for something
                }
            }
            </example>
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDevice(System.Byte,System.Int32)">
            <summary>
            Look up a device by device number and axis number.
            </summary>
            <param name="deviceNumber">The number of the device you want. 
            Device number 0 or other alias numbers will return a 
            DeviceCollection that represents all the devices using that alias 
            number.</param>
            <param name="axisNumber">The number of the axis you want. Numbers
            1 through 9 will return individual axes, and 0 will return the main
            device.</param>
            <returns>The requested device.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no device has the 
            requested device number and axis number.</exception>
            <seealso cref="M:Zaber.ZaberPortFacade.ContainsDevice(System.Byte)"/>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDeviceCollection(System.Byte)">
            <summary>
            Look up a device collection by device number.
            </summary>
            <param name="deviceNumber">The number of the device you want.</param>
            <returns>The device with the requested device number.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no device has the 
            requested device number.</exception>
            <exception cref="T:System.InvalidCastException">If the device is a single
            device instead of a collection.</exception>
            <remarks>
            To avoid the exceptions, you can safely get a device collection
            as follows:
            <example>
            if (portFacade.ContainsDevice(deviceNumber))
            {
                DeviceCollection devices =
                    portFacade.GetDevice(deviceNumber)
                    as DeviceCollection;
                if (devices != null)
                {
                    // Use devices for something
                }
            }
            </example>
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDeviceType(System.Int32,System.Int32)">
            <summary>
            Gets a DeviceType from the <see cref="P:Zaber.ZaberPortFacade.DeviceTypeMap"/>.
            </summary>
            <param name="deviceId">The device ID of the desired DeviceType.
            </param>
            <param name="firmwareVersion">The firmware version of the desired
            DeviceType, in the form given by the device (a 3-digit integer).
            </param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There does not exist an entry
            for the given device ID and firmware version.</exception>
            <returns>A DeviceType with the specified device ID and firmware 
            version.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetDeviceType(System.Int32,Zaber.FirmwareVersion)">
            <summary>
            Gets a DeviceType from the <see cref="P:Zaber.ZaberPortFacade.DeviceTypeMap"/>.
            </summary>
            <param name="deviceId">The device ID of the desired DeviceType.
            </param>
            <param name="firmwareVersion">The firmware version of the desired
            DeviceType.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There does not exist an entry
            for the given device ID and firmware version.</exception>
            <returns>A DeviceType with the specified device ID and firmware 
            version.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Open(System.String)">
            <summary>
            Open the port and check what devices are present.
            </summary>
            <param name="portName">One of the port names returned by 
            <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/>.</param>
            <remarks>Be sure to call <see cref="M:Zaber.ZaberPortFacade.Close"/> when you're finished.</remarks>
            <exception cref="T:Zaber.LoopbackException">A loopback connection was 
            detected on the serial port. To recover from this exception, 
            either physically remove the loopback connection or call 
            <see cref="M:Zaber.ZaberPortFacade.OpenWithoutQuery(System.String)"/>.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
            <exception cref="T:Zaber.ZaberPortErrorException">An error occurred while
            querying devices.</exception>
            <exception cref="T:Zaber.LoopbackException">A loopback connection was
            detected.</exception>
        </member>
        <member name="M:Zaber.ZaberPortFacade.OpenWithoutQuery(System.String)">
            <summary>
            Open the port without checking what devices are present and without
            building the <see cref="T:Zaber.ZaberDevice"/> and 
            <see cref="T:Zaber.Conversation"/> objects to represent those devices.
            </summary>
            <param name="portName">One of the port names returned by 
                <see cref="M:Zaber.ZaberPortFacade.GetPortNames"/>.</param>
            <remarks>There are always device and conversation objects for 
            device number 0 (all devices), but the conversation is empty and 
            will not support calls to the Request method. Be sure to call 
            <see cref="M:Zaber.ZaberPortFacade.Close"/> when you're finished.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.ZaberPortFacade.CheckMessageIdsMode(Zaber.DataPacket)">
            <summary>
            Check the 6th bit of a response to the "Get Device Mode" command.
            If the device's message ID mode does not match the setting of this
            ZaberPortFacade, send a command to set the device to match.
            </summary>
            <param name="dataPacket">A DataPacket containing the response to a
            "Get Device Mode" command.</param>
        </member>
        <member name="M:Zaber.ZaberPortFacade.DetermineMessageIdMode(System.Collections.Generic.SortedDictionary{System.Byte,Zaber.Conversation})">
            <summary>
            Ask each device whether it has Message IDs enabled. If not all
            devices agree, then try to set all devices to the mode of the first
            device to have responded.
            </summary>
            <param name="conversations">Conversations with the devices to check.</param>
            <returns>Whether message IDs are enabled.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.EnumerateAsciiRequests(System.Collections.Generic.IEnumerable{Zaber.Conversation},System.String)">
            <summary>
            Send the same request to all devices, and wait for a response.
            Yield the response for each request, so that calling code can
            follow up before the next request is sent.
            </summary>
            <param name="conversations">The conversations to send the request
            to.</param>
            <param name="text">The ASCII command to be sent.</param>
            <returns>The responses in the same order as the conversations.
            Any device collection conversation (alias or All device) will have
            null responses.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.EnumerateBinaryRequests(System.Collections.Generic.IEnumerable{Zaber.Conversation},Zaber.Command,System.Int32)">
            <summary>
            Send the same request to all devices, and wait for a response.
            Yield the response for each request, so that calling code can
            follow up before the next request is sent.
            </summary>
            <param name="conversations">The conversations to send the request
            to.</param>
            <param name="command">The command to send if the port is in Binary
            mode.</param>
            <param name="data">The data to send if the port is in Binary 
            mode.</param>
            <returns>The responses in the same order as the conversations.
            Any device collection conversation (alias, or All device) will have null responses.
            If the command is not supported, response is null.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetTextCommands(System.Collections.Generic.SortedDictionary{System.Byte,Zaber.Conversation},Zaber.TimeoutTimer)">
            <summary>
            Query each device for the list of text commands that it supports.
            </summary>
            <param name="conversations">The list of conversations to query.</param>
            <param name="queryTimeoutTimer">How long to wait for responses.</param>
        </member>
        <member name="M:Zaber.ZaberPortFacade.QueryAsciiDevices(Zaber.IZaberPort,Zaber.TimeoutTimer)">
            <summary>
            Query connected devices using the ASCII protocol.
            </summary>
            <param name="port">The serial port to use.</param>
            <param name="queryTimeoutTimer">Used to wait for responses.</param>
            <exception cref="T:Zaber.ZaberPortErrorException">An error occurred while
            querying devices.</exception>
            <exception cref="T:Zaber.LoopbackException">A loopback connection was
            detected.</exception>
        </member>
        <member name="M:Zaber.ZaberPortFacade.QueryBinaryDevices(Zaber.IZaberPort,Zaber.TimeoutTimer)">
            <summary>
            Query connected devices using the binary protocol.
            </summary>
            <param name="port">Serial port to use.</param>
            <param name="queryTimeoutTimer">Used to wait for responses.</param>
            <exception cref="T:Zaber.ZaberPortErrorException">An error occurred while
            querying devices.</exception>
            <exception cref="T:Zaber.LoopbackException">A loopback connection was
            detected.</exception>
        </member>
        <member name="P:Zaber.ZaberPortFacade.AllConversations">
            <summary>
            Gets a list of all conversations for all the devices,
            their alias numbers, and individual axes.
            </summary>
            <remarks>
            This collection includes conversations of all attached devices,
            their alias conversations (if the alias number is non-zero and does not collide with
            an existent conversation), their axis conversations, and the "All Device" conversation
            (<see cref="P:Zaber.ZaberDevice.DeviceNumber"/> 0).
            
            This collection include individual axes
            (non-zero <see cref="P:Zaber.ZaberDevice.AxisNumber"/>). Also see <see cref="P:Zaber.ZaberPortFacade.Conversations"/>.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.AreDeviceNumbersValidated">
            <summary>
            Get or set a flag that will raise a port error for an invalid 
            packet if a response packet has an unknown device number.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.AreMessageIdsEnabled">
            <summary>
            Enables or disables message ids mode on all devices attached 
            to the port.
            </summary>
            <remarks>
            <para>Message ids mode uses id numbers to match each response to 
            the request that triggered it. Message ids are also known as
            logical channels.</para>
            <para>The Zaber port facade forces you to keep the message ids
            mode the same on all devices attached to the port, either all on
            or all off. This avoids major confusion after a renumber request.
            Setting this property will trigger a "Return Setting" command
            for the device mode. The Zaber port facade will automatically send 
            "Set Device Mode" commands to switch any devices that don't match
            the requested setting. It will continue to do this whenever it
            sees a "Set Device Mode" response with the wrong setting of
            message ids mode.</para>
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.BaudRate">
            <summary>
            The baud rate of the underlying port.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Conversations">
            <summary>
            Gets a list of all conversations for all devices and their alias numbers.
            </summary>
            <remarks>
            This collection includes conversations of all attached devices,
            their alias conversations (if the alias number is non-zero
            and does not collide with an existent conversation),
            and the "All Device" conversation (<see cref="P:Zaber.ZaberDevice.DeviceNumber"/> 0).
            
            This collection does not include individual axes
            (non-zero <see cref="P:Zaber.ZaberDevice.AxisNumber"/>).
            Also see <see cref="P:Zaber.ZaberPortFacade.AllConversations"/>.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.CurrentState">
            <summary>
            Gets the current state of the facade.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.DefaultDeviceType">
            <summary>
            A device type that will be used for any device ids not found in 
            <see cref="P:Zaber.ZaberPortFacade.DeviceTypeMap"/>. Effectively, this is just used to 
            specify a generic set of commands and settings.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Devices">
            <summary>
            A collection of all the devices attached to the port.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.DeviceTypeMap">
            <summary>
            A dictionary of the known device types, keyed by a tuple with
            the value (deviceID, firmware version).
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.DeviceTypes">
            <summary>
            A list of the known device types.
            </summary>
            <remarks>
            Setting this property will set DeviceTypeMap to a new Dictionary
            instance, whose contents match those of the list specified.
            </remarks>
            <remarks>
            This property has been deprecated. It has been left here for
            backwards-compatibility, and may be removed in future versions.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsCollisionDetected">
            <summary>
            Gets a flag that shows whether two devices responded with the
            same device number.
            </summary>
            <remarks>
            If this is true, the client should send <see cref="F:Zaber.Command.Renumber"/>
            to device number 0 to force all devices to choose unique device 
            numbers.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsInvalidateEnabled">
            <summary>
            Gets or sets a flag that enables or disables the 
            <see cref="E:Zaber.ZaberPortFacade.Invalidated"/> event. Enabled by default.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Invalidate">
            <summary>
            Raises the port invalidated event, if invalidation is enabled.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.Port">
            <summary>
            Gets or sets the port that this facade is attached to.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.QueryTimeout">
            <summary>
            Gets or sets the time to wait in milliseconds for responses from 
            all devices.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.QueryTimeoutTimer">
            <summary>
            Gets or sets a timeout timer used to time how long we wait for
            responses from all devices.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortFacade.SelectedConversation">
            <summary>
            Get or set the currently selected conversation.
            </summary>
            <remarks>
            The meaning of this property is entirely up to the client program.
            However, whenever this property changes, it will raise the
            <see cref="E:Zaber.ZaberPortFacade.SelectedConversationChanged"/> event. Every time the
            port facade is opened or closed, this is set to the conversation 
            for device number 0, or all devices.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberPortFacade.SuppressEvents">
            <summary>
            If set to true, no events will be fired by this ZaberPortFacade
            instance.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.SelectedConversationChanged">
            <summary>
            Raised when the current conversation has changed.
            </summary>
            <remarks>Get the <see cref="T:Zaber.Conversation"/> property
            to see what the new one is.</remarks>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Opened">
            <summary>
            Raised when the port facade has finished opening.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Closed">
            <summary>
            Raised when the port facade is closed.
            </summary>
        </member>
        <member name="E:Zaber.ZaberPortFacade.Invalidated">
            <summary>
            Raised when the port facade is invalidated and should be reopened.
            </summary>
            <remarks>The port facade is invalidated when the list of connected
            devices may have become inaccurate. This happens after a response 
            to the Renumber command, the Convert to ASCII/Binary command,
            the RestoreSettings command, or the SetAlias command. 
            If client applications want to be sure the device list is
            accurate, they should call <see cref="M:Zaber.ZaberPortFacade.Close"/> and then
            <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/> to reopen the port and requery the list of 
            connected devices. The event is only raised the first time the
            facade is invalidated, so if two renumber commands are sent without
            reopening the port facade in between, only the first one will raise
            this event.
            </remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.GetPortNames">
            <summary>
            Get a list of all available ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.ZaberPortFacade.Open(System.String)"/>.</returns>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="P:Zaber.ZaberPortFacade.IsOpen">
            <summary>
            Is the port open?
            </summary>
            <remarks>This doesn't always agree with <see cref="P:Zaber.ZaberPortFacade.CurrentState"/>.
            For example, after a USB-to-serial adapter has been disconnected.</remarks>
        </member>
        <member name="M:Zaber.ZaberPortFacade.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
                resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Zaber.DeviceCollection">
            <summary>
            A collection of <see cref="T:Zaber.ZaberDevice"/> objects. It's used to represent
            an Alias device number.
            </summary>
            <remarks>
            This class is both a ZaberDevice and a collection of them. Any requests
            you send to it get received by all its member devices. (The hardware handles
            that.) Any request or response events from its members will also be raised
            by the collection. (The software handles that.)
            </remarks>
        </member>
        <member name="P:Zaber.DeviceCollection.IsSingleDevice">
            <summary>
            True if this is a single device, and not a collection of devices.
            </summary>
        </member>
        <member name="M:Zaber.DeviceCollection.Add(Zaber.ZaberDevice)">
            <summary>
            Adds a device to the collection.
            </summary>
            <param name="item">The device to add to the collection.</param>
        </member>
        <member name="M:Zaber.DeviceCollection.Clear">
            <summary>
            Removes all devices from the collection.
            </summary>
        </member>
        <member name="M:Zaber.DeviceCollection.Contains(Zaber.ZaberDevice)">
            <summary>
            Determines whether the collection contains a specific device.
            </summary>
            <param name="item">The device to locate in the collection</param>
            <returns>true if the device is found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.CopyTo(Zaber.ZaberDevice[],System.Int32)">
            <summary>
            Copies the devices in the collection to a System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the
            destination of the devices copied from the collection. The
            System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which
            copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less
            than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">arrayIndex is equal to or
            greater than the length of array.-or-The number of elements in the
            source collection is greater than the available space from
            arrayIndex to the end of the destination array.</exception>
        </member>
        <member name="P:Zaber.DeviceCollection.Count">
            <summary>
            Gets the number of devices contained in the collection.
            </summary>
        </member>
        <member name="P:Zaber.DeviceCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Zaber.DeviceCollection.Remove(Zaber.ZaberDevice)">
            <summary>
            Removes the first occurrence of a specific device from the collection.
            </summary>
            <param name="item">The device to remove from the collection.</param>
            <returns>true if the device was successfully removed from the collection,
                otherwise false. This method also returns false if the device is not found in
                the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>an enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.IndexOf(Zaber.ZaberDevice)">
            <summary>
                Searches for the specified device and returns the zero-based index of the
                first occurrence within the entire list.
            </summary>
            <param name="item">The device to locate in the list. The value
                can be null.</param>
            <returns>The zero-based index of the first occurrence of item within the entire 
            list, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Zaber.DeviceCollection.Insert(System.Int32,Zaber.ZaberDevice)">
            <summary>
                Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="M:Zaber.DeviceCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="P:Zaber.DeviceCollection.Item(System.Int32)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.  
            -or- index is equal to or greater than <see cref="P:Zaber.DeviceCollection.Count"/>.</exception>
        </member>
        <member name="T:Zaber.DeviceType">
            <summary>
            Describes the type of a <see cref="T:Zaber.ZaberDevice"/>.
            </summary>
            <remarks>The device type determines the list of supported commands.
            A device's set of supported commands is determined by 3 things: 
            device ID, peripheral ID, and firmware version.</remarks>
        </member>
        <member name="M:Zaber.DeviceType.#ctor">
            <summary>
            Initialize a new instance.
            </summary>
        </member>
        <member name="M:Zaber.DeviceType.#ctor(Zaber.DeviceType)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The DeviceType to copy details from.</param>
            <remarks>This copy constructor performs a deep copy of both the 
            commands list and peripheral map from the source DeviceType. This
            means that changes made to one DeviceType's command list or
            peripherals map will not be applied to the other's.</remarks>
        </member>
        <member name="P:Zaber.DeviceType.Name">
            <summary>
            A custom name to display to the user.
            </summary>
            <seealso cref="M:Zaber.DeviceType.ToString"/>
        </member>
        <member name="P:Zaber.DeviceType.Commands">
            <summary>
            Gets or sets a list of the commands that this device type supports.
            </summary>
        </member>
        <member name="P:Zaber.DeviceType.FirmwareVersion">
            <summary>
            Gets or sets the firmware version of this device.
            </summary>
            <value>The firmware version.</value>
        </member>
        <member name="P:Zaber.DeviceType.PeripheralMap">
            <summary>
            A dictionary of the peripherals that this device type supports,
            indexed by peripheral ID.
            </summary>
        </member>
        <member name="P:Zaber.DeviceType.Peripherals">
            <summary>
            A list of the peripherals that this device type supports.
            </summary>
            <remarks>
            This property returns the values of the <see cref="P:Zaber.DeviceType.PeripheralMap"/>
            dictionary.
            Setting this property will set <see cref="P:Zaber.DeviceType.PeripheralMap"/> to match
            the value specified.
            </remarks>
        </member>
        <member name="P:Zaber.DeviceType.DeviceId">
            <summary>
            The identifier for this device type.
            </summary>
        </member>
        <member name="P:Zaber.DeviceType.PeripheralId">
            <summary>
            The identifier for a specific peripheral if this device type is
            customized for a peripheral.
            </summary>
        </member>
        <member name="P:Zaber.DeviceType.MotionType">
            <summary>
            Gets or sets whether this device type uses linear, rotary, or some
            other type of motion.
            </summary>
        </member>
        <member name="M:Zaber.DeviceType.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is a DeviceType whose properties are
            equal to those of this instance, false otherwise.</returns>
        </member>
        <member name="M:Zaber.DeviceType.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.DeviceType.ToString">
            <summary>
            Returns the <see cref="P:Zaber.DeviceType.Name"/> or the <see cref="P:Zaber.DeviceType.DeviceId"/>.
            </summary>
            <returns>A descriptive string that can be displayed to a user.</returns>
        </member>
        <member name="M:Zaber.DeviceType.GetCommandByNumber(Zaber.Command)">
            <summary>
            Look up command details from the list of supported commands.
            </summary>
            <param name="command">The command number to look up</param>
            <returns>The command details, or null if the command is not
            supported by this device type.</returns>
        </member>
        <member name="M:Zaber.DeviceType.GetCommandByText(System.String)">
            <summary>
            Look up command details from the list of supported commands.
            </summary>
            <param name="text">The command name to look up.</param>
            <returns>The command details, or null if the command is not
            supported by this device type.</returns>
        </member>
        <member name="M:Zaber.DeviceType.GetPeripheralById(System.Int32)">
            <summary>
            Look up peripheral type from the list of supported peripherals.
            </summary>
            <param name="peripheralId">The peripheral id to look up</param>
            <returns>A device type to use.</returns>
        </member>
        <member name="T:Zaber.IZaberPort">
            <summary>
            Represents a communication port with Zaber devices attached, and
            translates between the byte streams and the DataPacket structure.
            </summary>
        </member>
        <member name="M:Zaber.IZaberPort.GetPortNames">
            <summary>
            Get a list of all available ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.IZaberPort.Open(System.String)"/>.</returns>
        </member>
        <member name="E:Zaber.IZaberPort.DataPacketReceived">
             <summary>
             Raised when the port receives data back from the devices. When a complete
             response has been received, it's converted to a <see cref="T:Zaber.DataPacket"/> object and
             sent through this event.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void MyForm_Load(object sender, EventArgs e)
             {
                 port.DataPacketReceived += 
                     new EventHandler&lt;DataPacketEventArgs&gt;(port_DataPacketReceived);
             }
            
             void port_DataPacketReceived(object sender, DataPacketEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.Data.DeviceNumber,
                     e.Data.Command,
                     e.Data.Data);
             }
             </code>
             </example>
             <remarks>
             <para>
             Be careful when handling this event, because it is usually raised 
             from a background thread. The simplest way to deal with that is not
             to register for this event at all. Use a <see cref="T:Zaber.Conversation"/>
             to coordinate requests and responses instead. It handles all the
             threading issues and just returns the response as the return
             value from <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
             </para>
             <para>If you do want to handle this event safely in your user 
             interface, read the first two sections of this article:
             http://weblogs.asp.net/justin_rogers/articles/126345.aspx
             It shows how to use <c>Control.InvokeRequired</c> and 
             <c>Control.BeginInvoke</c> to move execution back onto the UI
             thread from a background thread.
             </para>
             </remarks>
        </member>
        <member name="E:Zaber.IZaberPort.DataPacketSent">
            <summary>
            Raised when the port sends data to the devices. 
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally 
            raised from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details. Some scenarios where
            it can be raised from a background thread are: executing scripts 
            and automatically adjusting message id mode.
            </remarks>
        </member>
        <member name="E:Zaber.IZaberPort.ErrorReceived">
            <summary>
            Raised when the underlying port raises its own <c>ErrorReceived</c> 
            event, or when a partial data packet is received because some bytes
            have been dropped. The type of error is described by
            <see cref="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType"/>.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for 
            details.
            </remarks>
        </member>
        <member name="M:Zaber.IZaberPort.Open(System.String)">
            <summary>
            Open the port to begin sending and receiving data. Be sure to call 
            <see cref="M:Zaber.IZaberPort.Close"/> or <see cref="M:System.IDisposable.Dispose"/> when 
            you are finished with the port.
            </summary>
            <param name="portName">Should match one of the entries returned from
            <see cref="M:Zaber.IZaberPort.GetPortNames"/></param>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="P:Zaber.IZaberPort.IsOpen">
            <summary>
            Is the port open?
            </summary>
        </member>
        <member name="P:Zaber.IZaberPort.AreChecksumsSent">
            <summary>
            Flag that gets or sets whether checksums are sent with each text 
            message. If true, the checksum will be calculated with the
            Longitudinal Redundancy Check (LRC) algorithm.
            </summary>
        </member>
        <member name="P:Zaber.IZaberPort.IsAsciiMode">
            <summary>
            Flag that gets or sets whether the port is in ASCII mode.
            If it's not in ASCII mode, then all received data will be
            parsed as binary, 6-byte packets.
            </summary>
        </member>
        <member name="P:Zaber.IZaberPort.PortName">
            <summary>
            Gets the port name that was last sent to <see cref="M:Zaber.IZaberPort.Open(System.String)"/>.
            </summary>
            <value>The port name that was last sent to <see cref="M:Zaber.IZaberPort.Open(System.String)"/>, or
            null if <see cref="M:Zaber.IZaberPort.Open(System.String)"/> has not been called.</value>
        </member>
        <member name="P:Zaber.IZaberPort.BaudRate">
            <summary>
            Gets or sets the baud rate of the port, if the port is of a type
            which has a baud rate (ie. a serial port).
            </summary>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.Byte,Zaber.Command)">
            <summary>
            Convenience method for commands that ignore the data value. 
            It sends 0 as the data value.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.Byte,Zaber.Command,System.Int32,Zaber.Measurement)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="measurement">An optional measurement that the data 
            value was calculated from. May be null.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.String,Zaber.Measurement)">
            <summary>
            Send an ASCII command to a device on the chain.
            </summary>
            <param name="text">See <see cref="P:Zaber.DataPacket.Text"/>.</param>
            <param name="measurement">An optional measurement that the 
            command's data value was calculated from. May be null.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.Send(System.String)">
            <summary>
            Send a text-mode command to a device on the chain.
            </summary>
            <param name="text">The full command to send to the device.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain after a delay.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The data packet that will be sent. You can pass this object
            to <see cref="M:Zaber.IZaberPort.CancelDelayedPacket(Zaber.DataPacket)"/>.</returns>
            <remarks>Wait for <see cref="P:Zaber.IZaberPort.DelayMilliseconds"/> before sending
            the command. If you call this method several times, the commands
            get queued up and sent one at a time with a delay before each one.
            </remarks>
        </member>
        <member name="P:Zaber.IZaberPort.DelayMilliseconds">
            <summary>
            Get or set the delay period to use with <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            Defaults to 500.
            </summary>
        </member>
        <member name="M:Zaber.IZaberPort.CancelDelayedPacket(Zaber.DataPacket)">
            <summary>
            Cancel a delayed packet that is waiting to be sent.
            </summary>
            <param name="packet">Returned by <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.</param>
            <returns>True if the packet will not be sent, false if it has 
            already been sent.</returns>
        </member>
        <member name="M:Zaber.IZaberPort.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.IZaberPort.ReportInvalidPacket">
            <summary>
            Report that an invalid packet was received by raising the 
            <see cref="E:Zaber.IZaberPort.ErrorReceived"/> event.
            </summary>
            <remarks>This can be called by any higher-level code that decides
            a packet was invalid. An example would be if the device number
            doesn't match any known devices.</remarks>
        </member>
        <member name="P:Zaber.IZaberPort.SendLock">
            <summary>
            Synchronization lock that controls when data packets are sent to
            the port.
            </summary>
            <remarks>If you lock this, then no data packets will be sent until
            you release it.
            </remarks>
        </member>
        <member name="T:Zaber.ZaberDevice">
            <summary>
            Represents a device attached to the computer's port.
            </summary>
            <remarks>The ZaberDevice provides an event-driven interface to the device.
            Check out the <see cref="T:Zaber.Conversation"/> class for request-driven 
            interface.</remarks>
        </member>
        <member name="F:Zaber.ZaberDevice.DefaultMicrostepResolution">
            <summary>
            The default value for the <see cref="P:Zaber.ZaberDevice.MicrostepResolution"/> 
            property.
            </summary>
        </member>
        <member name="M:Zaber.ZaberDevice.#ctor">
            <summary>
            Initialize a new instance.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.Axes">
            <summary>
            Get a list of axes for this device.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.AxisNumber">
            <summary>
            Gets or sets the axis number for devices that represent an axis on 
            multi-axis controllers.
            </summary>
            <remarks>For the controller itself, this will be zero.</remarks>
        </member>
        <member name="P:Zaber.ZaberDevice.AreMessageIdsEnabled">
            <summary>
            Enables or disables Binary message ids mode on this device.
            </summary>
            <remarks>
            <para>Message ids mode uses id numbers to match each response to 
            the request that triggered it. Message ids are also known as
            logical channels.</para>
            </remarks>
            <seealso cref="P:Zaber.ZaberPortFacade.AreMessageIdsEnabled"/>
            <seealso cref="P:Zaber.DataPacket.MessageId"/>
        </member>
        <member name="P:Zaber.ZaberDevice.AreAsciiMessageIdsEnabled">
            <summary>
            Enables or disables ASCII message IDs on this device.
            </summary>
            <seealso cref="P:Zaber.DataPacket.MessageId"/>
        </member>
        <member name="P:Zaber.ZaberDevice.IsInBootloaderMode">
            <summary>
            Set to true during device detection if the device returns the
            "NB" flag, which means it is in bootloader mode and has a reduced command set.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.Description">
            <summary>
            Gets a description of the device in a standard format.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.DeviceNumber">
            <summary>
            The device number is used as an address to send requests to.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.DeviceType">
            <summary>
            The device type determines the list of supported commands.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.AccessLevel">
            <summary>
            The current access level setting on the device, if applicable.
            Determines which commands and settings are visible to the user.
            If not applicable, defaults to int.MaxValue which makes all visible.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.FirmwareVersion">
            <summary>
            The firmware version on the device.
            </summary>
            <remarks>This property is a convenient shortcut for
            DeviceType.FirmwareVersion. If you would like to set this property,
            set the FirmwareVersion property of the DeviceType.</remarks>
        </member>
        <member name="P:Zaber.ZaberDevice.HasSubscribers">
            <summary>
            Gets a flag showing whether this device has any objects subscribed
            to its events. (Used for testing.)
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.IsSingleDevice">
            <summary>
            True if this is a single device, and not a collection of devices.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.IsTrackingRequests">
            <summary>
            Gets a flag indicating that this device is tracking the request 
            that generated each response.
            </summary>
            <remarks>This is only true when the port is in ASCII mode.
            </remarks>
        </member>
        <member name="P:Zaber.ZaberDevice.MicrostepResolution">
            <summary>
            Gets or sets the current microstep resolution of this device.
            </summary>
            <remarks>This is updated whenever a 
            <see cref="F:Zaber.Command.SetMicrostepResolution"/> response is 
            received.</remarks>
            <value>The number of microsteps in a full step. Default value is 
            64.</value>
        </member>
        <member name="P:Zaber.ZaberDevice.Port">
            <summary>
            The port to send requests to and receive responses from.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.RecentPosition">
            <summary>
            Gets the most recently received position update for this device.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.VelocityCoefficient">
            <summary>
            Velocity is measured in a weird, arbitrary unit which depends on
            the firmware tick rate and device architecture. Multiply a data
            value by this coefficient to convert it to microsteps per second.
            </summary>
        </member>
        <member name="P:Zaber.ZaberDevice.AccelerationCoefficient">
            <summary>
            Acceleration is measured in a weird, arbitrary unit which depends on
            the firmware tick rate and device architecture. Multiply a data
            value by this coefficient to convert it to microsteps per second
            squared.
            </summary>
        </member>
        <member name="M:Zaber.ZaberDevice.OnDataPacketSent(System.Object,Zaber.DataPacketEventArgs)">
            <summary>
            Handle a data packet sent to the port and raise a corresponding event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Zaber.ZaberDevice.OnDataPacketReceived(System.Object,Zaber.DataPacketEventArgs)">
            <summary>
            Handle a data packet received from the port and raise a corresponding event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Zaber.ZaberDevice.OnMessageReceived(Zaber.DeviceMessageEventArgs)">
            <summary>
            Protected method to allow derived classes to raise the 
            MessageReceived event.
            </summary>
            <param name="e">The details of the message.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.OnMessageSent(Zaber.DeviceMessageEventArgs)">
            <summary>
            Protected method to allow derived classes to raise the 
            MessageSent event.
            </summary>
            <param name="e">The details of the message.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.AddAxis(Zaber.ZaberDevice)">
            <summary>
            Add a device that represents an axis for this controller.
            </summary>
            <param name="axis">The axis to add.</param>
            <remarks>All controllers have a collection of devices - one
            for each axis.</remarks>
        </member>
        <member name="M:Zaber.ZaberDevice.CalculateData(Zaber.Command,Zaber.Measurement)">
            <summary>
            Calculate what the data value should be to represent the requested
            measurement on the requested command.
            </summary>
            <param name="command">The command that will use the data.</param>
            <param name="measurement">The measurement to send to this device.
            </param>
            <returns>A data value to send as part of a command.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.CalculateData(System.String,Zaber.Measurement)">
            <summary>
            Calculate what the data value should be to represent the requested
            measurement on the requested command.
            </summary>
            <param name="text">The command that will use the data.</param>
            <param name="measurement">The measurement to send to this device.
            </param>
            <returns>A data value to send as part of a command.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.CreateDeviceMessage(Zaber.DataPacket)">
            <summary>
            Converts a data packet into a device message by populating the
            message id and command info fields.
            </summary>
            <param name="dataPacket">The data packet to copy</param>
            <returns>A device message with the new fields populated</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.FormatData(System.Int32,Zaber.UnitOfMeasure)">
            <summary>
            Display a data value in another unit of measure. Requires certain
            commands to be present in the <see cref="P:Zaber.ZaberDevice.DeviceType"/>'s list of
            commands. See remarks for details.
            </summary>
            <param name="rawData">The data value to display.</param>
            <param name="toUnit">The unit of measure to convert to.</param>
            <remarks>
            To convert from data to a position, DeviceType.Commands must contain
            the "Set Current Position" command in either ASCII ("pos") or Binary
            (command 45). To convert from data to a velocity, it must contain
            the "Set Target Speed" command, which is called "maxspeed" in ASCII
            and is command number 42 in Binary. Finally, to convert from data to
            an acceleration, the commands list must contain the "Set 
            Acceleration" command, which is "accel" in ASCII and command 43 in
            Binary.
            
            Regardless of which kind of conversion is taking place, the relevant
            command must have ites "RequestUnit", "RequestUnitScale", and 
            "RequestUnitFunction" properties set in order to provide sufficient
            information for conversion.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The 
            <see cref="P:Zaber.ZaberDevice.DeviceType"/>'s "Commands" list did not contain the
            required command to perform the conversion to the unit of measure
            specified.</exception>
            <returns>A string representation of the data value. Rounded to one
            decimal place beyond the device's microstep size.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.GetUnitsOfMeasure(Zaber.MeasurementType)">
            <summary>
            Get a list of the units of measure this device supports.
            </summary>
            <param name="measurementType">The type of measurement: position, 
            velocity, etc.</param>
            <returns>A list of units of measure, sorted with raw data as the
            first entry.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.GetAllUnitsOfMeasure">
            <summary>
            Get a list of all the units of measure this device supports, 
            including all possible measurement types.
            </summary>
            <returns>A set of units of measure.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.Send(Zaber.Command,System.Int32,System.Byte)">
            <summary>
            Send a command to this device.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.TimeoutException">The operation did not complete
            before the time-out period ended.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.ZaberDevice.Send(System.String,System.Byte)">
            <summary>
            Send a command to this device.
            </summary>
            <param name="text">The command to send to the device without the 
            slash, device address and axis number.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.TimeoutException">The operation did not complete
            before the time-out period ended.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.ZaberDevice.SendInUnits(Zaber.Command,Zaber.Measurement,System.Byte)">
            <summary>
            Send a command to this device.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="measurement">The <see cref="P:Zaber.DataPacket.Data"/> value 
            will be calculated from this.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.SendInUnits(System.String,Zaber.Measurement,System.Byte)">
            <summary>
            Send a command to this device.
            </summary>
            <param name="text">The command to send to the device without the 
            slash, device number or axis number.</param>
            <param name="measurement">A data value to append to the command
            will be calculated from this. If it is null, then the command 
            will be sent without any extra data.</param>
            <param name="messageId">The ASCII message ID to be sent.</param>
        </member>
        <member name="M:Zaber.ZaberDevice.SendDelayed(Zaber.Command,System.Int32,System.Byte)">
            <summary>
            Send a command to this device after a delay.
            </summary>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="messageId">See <see cref="P:Zaber.DataPacket.MessageId"/>.</param>
            <remarks>See <see cref="M:Zaber.IZaberPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/> for the details
            of how the delay works. This command may never be sent, if the port
            gets closed.
            </remarks>
            <returns>The data packet that will be sent, or null if the port is
            already closed.</returns>
        </member>
        <member name="E:Zaber.ZaberDevice.MessageReceived">
             <summary>
             Raised when the device receives a data packet back from the port.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void Register(ZaberDevice device)
             {
                 device.MessageReceived += 
                     new EventHandler&lt;DeviceMessageEventArgs&gt;(device_MessageReceived);
             }
            
             void device_MessageReceived(object sender, DeviceMessageEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.DeviceMessage.DeviceNumber,
                     e.DeviceMessage.Command,
                     e.DeviceMessage.Data);
             }
             </code>
             </example>
             <remarks>
             Be careful when handling this event, because it is usually raised 
             from a background thread. See 
             <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details on how to
             handle events from background threads and how to just avoid them.
             </remarks>
        </member>
        <member name="E:Zaber.ZaberDevice.MessageSent">
            <summary>
            Raised when the device sends a packet to the port.
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally raised 
            from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details on how to
            handle events from background threads and how to just avoid them.
            </remarks>
        </member>
        <member name="M:Zaber.ZaberDevice.ApplyScalingFunction(Zaber.ScalingFunction,System.Double,System.Double,System.Int32)">
            <summary>
            Apply a given scaling function to a real-life unit to get the
            equivalent device unit.
            </summary>
            <param name="scalingFunction">The scaling function.</param>
            <param name="scale">A number by which physical units scale to the
            device's units.</param>
            <param name="physicalUnits">The unit to be scaled.</param>
            <param name="resolution">The microstep resolution of the device.
            Only requred when scalingFunction is LinearResolution or 
            TangentialResolution.</param>
            <remarks><paramref name="physicalUnits"/> has no unit associated
            with it (it is not a Measurement). This function will blindly
            apply the scale to the unit, assuming they are consistent with one
            another. It is up to the user of this function to ensure that the
            physical measurement provided is in the same unit as expected by
            the scale. For example, if <paramref name="scale"/> is a scaling
            factor between microsteps and metres, physicalUnits should be in
            metres.</remarks>
            <returns>A number of microsteps which should move the device the
            proper distance, according to the scale.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.CalculateData(Zaber.CommandInfo,Zaber.Measurement)">
            <summary>
            Calculate what the data value should be to represent the requested
            measurement on the requested command.
            </summary>
            <param name="commandInfo">The command metadata that will use the
            data.</param>
            <param name="measurement">The measurement to send to this device.
            </param>
            <returns>A data value to send as part of a command.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.CalculateMeasurement(Zaber.CommandInfo,System.Int32,System.Boolean)">
            <summary>
            Calculate a measurement for a given data value.
            </summary>
            <param name="commandInfo">The command that the data value is for.
            </param>
            <param name="data">The data value to convert.</param>
            <param name="isRequest">True if the data is part of a request, 
            false if it's part of a response.</param>
            <returns>A measurement in the appropriate unit of measure, or as 
            raw data if it couldn't be converted.</returns>
        </member>
        <member name="M:Zaber.ZaberDevice.ReverseScalingFunction(Zaber.ScalingFunction,System.Double,System.Int32,System.Int32)">
            <summary>
            Like ApplyScalingFunction, but in reverse. Takes a number of
            microsteps and applies a scaling function in reverse to return
            a physical unit.
            </summary>
            <param name="scalingFunction">The scaling function to be
            (un-)applied.</param>
            <param name="scale">The scaling constant.</param>
            <param name="deviceUnits">A number of microsteps to be converted
            into a real-life unit.</param>
            <param name="resolution">The microstep resolution. Can be omitted
            if the scaling function does not use it.</param>
            <remarks>Like ApplyScalingFunction, this function is blind to units.
            This means that the integer returned will depend entirely on the
            unit which <paramref name="scale"/> represents. For example, if
            scale represents the scale between microsteps and metres, then the
            return value of this function will be in metres.</remarks>
            <returns>An integer representing a physical measurement.</returns>
        </member>
        <member name="T:Zaber.ZaberPortErrorReceivedEventArgs">
            <summary>
            Returns a response from one of the devices in the chain.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType">
            <summary>
            The type of error that raised the event.
            </summary>
        </member>
        <member name="P:Zaber.ZaberPortErrorReceivedEventArgs.Message">
            <summary>
            A string containing extra data related to the error.
            </summary>
        </member>
        <member name="M:Zaber.ZaberPortErrorReceivedEventArgs.#ctor(Zaber.ZaberPortError)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorType">The type of error that raised this event</param>
        </member>
        <member name="M:Zaber.ZaberPortErrorReceivedEventArgs.#ctor(Zaber.ZaberPortError,System.String)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="errorType">The type of error that raised this event</param>
            <param name="errorMessage">A message associated with the error.</param>
        </member>
        <member name="T:Zaber.ZaberPortError">
            <summary>
            These error types are copied from <c>System.IO.Ports.SerialError</c>,
            with the addition of <see cref="F:Zaber.ZaberPortError.PacketTimeout"/> and 
            <see cref="F:Zaber.ZaberPortError.InvalidPacket"/>. They are used
            by <see cref="T:Zaber.TSeriesPort"/> to either delegate the <c>SerialPort</c>'s
            <c>ErrorReceived</c> event, or to raise its own 
            <see cref="E:Zaber.TSeriesPort.ErrorReceived"/> event when a partial packet
            times out, or someone calls 
            <see cref="M:Zaber.TSeriesPort.ReportInvalidPacket"/>.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.None">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.RXOver">
            <summary>
            An input buffer overflow has occurred. There is either no room in 
            the input buffer, or a character was received after the end-of-file 
            (EOF) character. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.Overrun">
            <summary>
            A character-buffer overrun has occurred. The next character is lost. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.RXParity">
            <summary>
            The hardware detected a parity error. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.Frame">
            <summary>
            The hardware detected a framing error.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.TXFull">
            <summary>
            The application tried to transmit a character, but the output 
            buffer was full. 
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.PacketTimeout">
            <summary>
            A partial packet was received, but not completed before the timeout
            expired.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.InvalidPacket">
            <summary>
            A packet was received, but it was reported as invalid.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.InvalidChecksum">
            <summary>
            The checksum value did not match the packet contents.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortError.ReceiveException">
            <summary>
            The receiving thread threw an exception. See the application log
            for details.
            </summary>
        </member>
        <member name="T:Zaber.Command">
            <summary>
            Named constants for the common commands that most T-Series devices 
            will support.
            </summary>
            <remarks>
            <c>Command</c> values and <c>byte</c> values are interchangeable,
            but you do need an explicit cast to convert from one to the other.
            </remarks>
        </member>
        <member name="F:Zaber.Command.Reset">
            <summary>
            Data is ignored.
            </summary>
        </member>
        <member name="F:Zaber.Command.Home">
            <summary>
            Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Renumber">
            <summary>
            Request data is New Number. Response data is Device Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReadRegister">
            <summary>
            Request data is Register Address. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetActiveRegister">
            <summary>
            Request data is Register Address. Response data is Register Address. 
            </summary>
        </member>
        <member name="F:Zaber.Command.WriteRegister">
            <summary>
            Request data is Data. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveTracking">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.LimitActive">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ManualMoveTracking">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ManualMove">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SlipTracking">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.UnexpectedPosition">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.StoreCurrentPosition">
            <summary>
            Request data is Address. Response data is Address. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnStoredPosition">
            <summary>
            Request data is Address. Response data is Stored Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveToStoredPosition">
            <summary>
            Request data is Address. Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveAbsolute">
            <summary>
            Request data is Absolute Position. Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveRelative">
            <summary>
            Request data is Relative Position. Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.MoveAtConstantSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Stop">
            <summary>
            Response data is Final Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetActiveAxis">
            <summary>
            Request data is Axis. Response data is Axis. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisDeviceNumber">
            <summary>
            Request data is Device Number. Response data is Device Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisInversion">
            <summary>
            Request data is Invert Status. Response data is Invert Status. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisVelocityProfile">
            <summary>
            Request data is Profile Number. Response data is Profile Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAxisVelocityScale">
            <summary>
            Request data is Maximum Velocity. Response data is Maximum Velocity. 
            </summary>
        </member>
        <member name="F:Zaber.Command.LoadEventInstruction">
            <summary>
            Request data is Key Event. Response data is Key Event. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnEventInstruction">
            <summary>
            Request data is Key Event. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetCalibrationMode">
            <summary>
            Request data is Calibration Mode. Response data is Calibration Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReadOrWriteMemory">
            <summary>
            Request data is Data. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.RestoreSettings">
            <summary>
            Request data is Peripheral Id. Response data is Peripheral Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMicrostepResolution">
            <summary>
            Request data is Microsteps. Response data is Microsteps. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetRunningCurrent">
            <summary>
            Request data is Value. Response data is Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHoldCurrent">
            <summary>
            Request data is Value. Response data is Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetDeviceMode">
            <summary>
            Request data is Mode. Response data is Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetTargetSpeed">
            <summary>
            Request data is Speed. Response data is Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAcceleration">
            <summary>
            Request data is Acceleration. Response data is Acceleration. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMaximumPosition">
            <summary>
            Request data is Position. Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMaximumRange">
            <summary>
            Identical to SetMaximumPosition, this is just for backward 
            compatibility. Request data is Range. Response data is Range. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetCurrentPosition">
            <summary>
            Request data is New Position. Response data is New Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMaximumRelativeMove">
            <summary>
            Request data is Range. Response data is Range. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeOffset">
            <summary>
            Request data is Offset. Response data is Offset. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAliasNumber">
            <summary>
            Request data is Alias Number. Response data is Alias Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetLockState">
            <summary>
            Request data is Lock State. Response data is Lock State. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnDeviceId">
            <summary>
            Response data is Device Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnFirmwareVersion">
            <summary>
            Response data is Version. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnPowerSupplyVoltage">
            <summary>
            Response data is Voltage. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnSetting">
            <summary>
            Request data is Setting Number. Response data is Setting Value. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnStatus">
            <summary>
            Response data is Status. 
            </summary>
        </member>
        <member name="F:Zaber.Command.EchoData">
            <summary>
            Request data is Data. Response data is Data. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnFirmwareBuild">
            <summary>
            Response data is Build Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnCurrentPosition">
            <summary>
            Response data is Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ReturnSerialNumber">
            <summary>
            Response data is Serial Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetParkState">
            <summary>
            Request data is Park State. Response data is Park State. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetPeripheralId">
            <summary>
            Request data is Peripheral Id. Response data is Peripheral Id. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAutoReplyDisabledMode">
            <summary>
            Request data is Auto-Reply Disabled Mode. Response data is Auto-Reply Disabled Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMessageIdMode">
            <summary>
            Request data is Message Id Mode. Response data is Message Id Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeStatus">
            <summary>
            Request data is Home Status. Response data is Home Status. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetHomeSensorType">
            <summary>
            Request data is Home Sensor Type. Response data is Home Sensor Type. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAutoHomeDisabledMode">
            <summary>
            Request data is Auto-Home Disabled Mode. Response data is Auto-Home Disabled Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMinimumPosition">
            <summary>
            Request data is Minimum Position. Response data is Minimum Position. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobDisabledMode">
            <summary>
            Request data is Knob Disabled Mode. Response data is Knob Disabled Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobDirection">
            <summary>
            Request data is Knob Direction. Response data is Knob Direction. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobMovementMode">
            <summary>
            Request data is Movement Mode. Response data is Movement Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobJogSize">
            <summary>
            Request data is Jog Size. Response data is Jog Size. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobVelocityScale">
            <summary>
            Request data is Maximum Speed. Response data is Maximum Speed. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetKnobVelocityProfile">
            <summary>
            Request data is Profile Number. Response data is Profile Number. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetAccelerationOnly">
            <summary>
            Request data is Acceleration. Response data is Acceleration. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetDecelerationOnly">
            <summary>
            Request data is Deceleration. Response data is Deceleration. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMoveTrackingMode">
            <summary>
            Request data is Move Tracking Mode. Response data is Move Tracking Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetManualMoveTrackingDisabledMode">
            <summary>
            Request data is Manual Move Tracking Disabled Mode. Response data is Manual Move Tracking Disabled Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetMoveTrackingPeriod">
            <summary>
            Request data is Tracking Period in ms. Response data is Tracking Period in ms. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetClosedLoopMode">
            <summary>
            Request data is Closed-Loop Mode. Response data is Closed-Loop Mode. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetSlipTrackingPeriod">
            <summary>
            Request data is Tracking Period in ms. Response data is Tracking Period in ms. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetStallTimeout">
            <summary>
            Request data is Stall Timeout in ms. Response data is Stall Timeout in ms. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetDeviceDirection">
            <summary>
            Request data is Device Direction. Response data is Device Direction. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetBaudrate">
            <summary>
            Request data is Baudrate. Response data is Baudrate. 
            </summary>
        </member>
        <member name="F:Zaber.Command.SetProtocol">
            <summary>
            Request data is Protocol. Response data is Protocol. 
            </summary>
        </member>
        <member name="F:Zaber.Command.ConvertToAscii">
            <summary>
            Request data is Baudrate. Response data is Baudrate. 
            </summary>
        </member>
        <member name="F:Zaber.Command.Error">
            <summary>
            Response data is Error Code. 
            </summary>
        </member>
        <member name="T:Zaber.DataPacket">
            <summary>
            A collection of all the data that gets sent to and received from the
            T-Series devices.
            </summary>
            <remarks>
            This class is mostly used inside the Zaber library. It converts
            the commands to byte streams and back again. The place that client
            programs will see it is in the <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/>
            event handler.
            </remarks>
            <example>
            Receive a response
            <code>
            void port_DataPacketReceived(object sender, DataPacketReceivedEventArgs e)
            {
                System.Console.Out.WriteLine(
                    "Device {0}: {1}({2})",
                    e.Data.DeviceNumber,
                    e.Data.Command,
                    e.Data.Data);
            }
            </code>
            </example>
        </member>
        <member name="M:Zaber.DataPacket.#ctor">
            <summary>
            Initialize the data structure with all values set to zero.
            </summary>
        </member>
        <member name="M:Zaber.DataPacket.#ctor(System.String)">
            <summary>
            Parse a text message into a data packet.
            </summary>
            <param name="text">parse details from this text</param>
            <remarks>Expected format for reply message is 
            `@dd a [mm ]ff ssss ww xxxx[:CC]` where dd is the device number,
            a is the axis number, mm is the message ID, ff is a flag (OK or RJ
            for reject), ssss is the status (IDLE or BUSY), ww is the top
            warning flag, xxxx is a list of one or more data values, and CC is
            the checksum.</remarks>
            <exception cref="T:Zaber.MalformedTextException">The text could not
            be parsed and so is malformed.</exception>
        </member>
        <member name="M:Zaber.DataPacket.#ctor(Zaber.DataPacket)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">copy details from this packet</param>
        </member>
        <member name="P:Zaber.DataPacket.Data">
            <summary>
            Data value to go with the command
            </summary>
            <value>
            Any integer value, positive or negative. Details depend on the
            different command values. See the user manual.
            </value>
            <remarks>For ASCII responses with multiple data values, this
            will hold the first data value. <see cref="P:Zaber.DataPacket.DataValues"/> will hold
            all the data values. If the data value is text, then this will
            be zero.</remarks>
        </member>
        <member name="P:Zaber.DataPacket.DataValues">
            <summary>
            An array of data values to go with the command
            </summary>
            <value>An array of integer values, positive or negative. Deatils
            depend on the different commands. See the user manual.</value>
            <remarks>If any of the data values are text, then the corresponding
            entry will be zero. <see cref="P:Zaber.DataPacket.TextDataValues"/> will hold the
            text version of each data value.</remarks>
        </member>
        <member name="P:Zaber.DataPacket.Measurement">
            <summary>
            Gets or sets a measurement that represents the data value in 
            another unit of measure.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.Command">
            <summary>
            The specific command to execute. See the user manual for a list of 
            supported commands and the data values they support. Some common
            commands are listed in the <see cref="T:Zaber.Command"/> enumeration.
            </summary>
            <value>
            You can assign any byte value, but you have to cast it to a Command
            type first.
            </value>
            <example>
            Use one of the values from the Command enumeration.
            <code>
            DataPacket data = new DataPacket();
            data.DeviceNumber = 3;
            data.Command = Command.ConstantSpeed;
            data.Data = 100;
            </code>
            </example>
            <example>
            Cast a byte value to a command value.
            <code>
            byte commandFromUser = 43; // Maybe these get read from a form
            int dataFromUser = 100;
            
            DataPacket data = new DataPacket();
            data.DeviceNumber = 3;
            data.Command = (Command)commandFromUser;
            data.Data = dataFromUser;
            </code>
            </example>
        </member>
        <member name="P:Zaber.DataPacket.DeviceNumber">
            <summary>
            The device number in the chain that this command should be sent to 
            or was received from.
            </summary>
            <remarks>
            You can send a command directly to a device, or send a command to 
            an alias device number. 0 is always an alias for all devices, and 
            each device can set another alias number. Several devices can use 
            the same alias, and all of them will respond to a command using
            the alias device number.
            </remarks>
        </member>
        <member name="P:Zaber.DataPacket.AxisNumber">
            <summary>
            Gets or sets the axis number on the device that this command
            should be sent to or was received from.
            </summary>
            <remarks>
            You can send a command directly to an axis, or send a command
            to all axes on the device. Axis number 0 represents all axes
            on the device.
            </remarks>
        </member>
        <member name="P:Zaber.DataPacket.MessageIdType">
            <summary>
            Gets or sets the type of message ID in this message.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.MessageId">
            <summary>
            Gets or sets the message ID corresponding to this message.
            </summary>
            <remarks>
            Message Ids allow you to coordinate responses with the requests 
            that triggered them.
            
            In T-series Binary protocol, messages Ids are also known as logical channels.
            </remarks>
        </member>
        <member name="M:Zaber.DataPacket.FormatRequest">
            <summary>
            Format the data packet as a string, assuming that it was sent as a 
            request.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="M:Zaber.DataPacket.FormatResponse">
            <summary>
            Format the message as a string, assuming that it was sent as a 
            response.
            </summary>
            <returns>The message as a string</returns>
        </member>
        <member name="P:Zaber.DataPacket.IsError">
            <summary>
            Gets a flag showing if this packet is an error message.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.IsAgain">
            <summary>
            Gets a flag showing if this packet is an error message with the AGAIN response.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.HasFault">
            <summary>
            Gets a flag showing if this packet has a warning flag that is a
            fault.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.TextData">
            <summary>
            Gets the data field from a text-mode response, otherwise null.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.FlagText">
            <summary>
            Gets the flag field from a text-mode response, otherwise null.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.TextDataValues">
            <summary>
            Gets the individual data values from a text-mode response, 
            otherwise null.
            </summary>
            <value>The data values are split by spaces and stored here.</value>
        </member>
        <member name="P:Zaber.DataPacket.IsIdle">
            <summary>
            Gets a flag showing if the device is idle.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.MessageType">
            <summary>
            Gets the type of message.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.Text">
            <summary>
            Gets the original text of the message, or null for binary messages.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.Body">
            <summary>
            Gets part of the original text of the message, without the start
            marker, device number, message ID, or check sum. Only available for text 
            responses, null for everything else.
            </summary>
        </member>
        <member name="P:Zaber.DataPacket.IsChecksumInvalid">
            <summary>
            Gets a flag showing whether the message had a checksum that didn't
            match its content.
            </summary>
        </member>
        <member name="M:Zaber.DataPacket.ValidateChecksum">
            <summary>
            Throws an exception if the checksum was invalid.
            </summary>
            <exception cref="T:Zaber.ZaberPortErrorException">When the checksum was 
            invalid.</exception>
        </member>
        <member name="T:Zaber.MalformedTextException">
            <summary>
            Thrown when an ASCII message could not be parsed.
            </summary>
        </member>
        <member name="M:Zaber.MalformedTextException.#ctor(System.String)">
            <summary>
            Creates a new instance of the MalformedTextException class.
            </summary>
            <param name="message">A message describing why this exception was
            created.</param>
        </member>
        <member name="T:Zaber.PacketConverter">
            <summary>
            This class is used inside the library to convert between the serial port
            byte stream and the <see cref="T:Zaber.DataPacket"/> data structure. It also
            times out when a byte gets 
            dropped and a partial packet is left in the serial port for too long.
            </summary>
        </member>
        <member name="F:Zaber.PacketConverter.PacketSize">
            <summary>
            The size of the byte array that the data gets converted from
            and to.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.#ctor(System.Int32)">
            <summary>
            Create a new instance and record packet history.
            </summary>
            <param name="historyCount">The number of packets to record.</param>
            <remarks>Use <see cref="M:Zaber.PacketConverter.FormatHistory"/> to retrieve the
            packet history.</remarks>
        </member>
        <member name="P:Zaber.PacketConverter.IsAsciiMode">
            <summary>
            Flag that gets or sets whether the converter is in ASCII mode.
            If it's not in ASCII mode, then all received data will be
            parsed as binary, 6-byte packets.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.ClearBuffer">
            <summary>
            Clears the PacketConverter's buffers.
            </summary>
            <remarks>
            This should be called when an incomplete message has been read.
            For example, it should be called after closing a port, or when
            no data has been read for a long time.
            </remarks>
        </member>
        <member name="M:Zaber.PacketConverter.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.FormatPartialPacket">
            <summary>
            Format the contents of any partial packet as a string of 
            hexadecimal digits.
            </summary>
            <remarks>This is mostly useful for testing purposes.</remarks>
            <returns>A string of hexadecimal digits, possibly empty.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.FormatHistory">
            <summary>
            Format the history of the last few bytes received along with
            the timing.
            </summary>
            <returns>The formatted history.</returns>
            <exception cref="T:System.InvalidOperationException">when no history count
            was specified for this object at construction.</exception>
        </member>
        <member name="M:Zaber.PacketConverter.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.ReceiveByte(System.Byte)">
            <summary>
            Add another byte to the incoming byte stream. If this byte 
            completes a packet, then the <see cref="E:Zaber.PacketConverter.DataPacketReceived"/> event
            will be raised.
            </summary>
            <param name="value">The byte to receive.</param>
        </member>
        <member name="E:Zaber.PacketConverter.PortError">
            <summary>
            Raised when a port error is detected, including partial packet 
            timeouts.
            </summary>
        </member>
        <member name="E:Zaber.PacketConverter.DataPacketReceived">
            <summary>
            Raised when a complete packet is received. 
            The packet is included in the event arguments.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See 
            <see cref="E:Zaber.IZaberPort.DataPacketReceived"/> for details.
            </remarks>
        </member>
        <member name="M:Zaber.PacketConverter.GetBytes(Zaber.DataPacket)">
            <summary>
            Convert a <see cref="T:Zaber.DataPacket"/> to a byte stream.
            </summary>
            <param name="dataPacket">The data packet to convert</param>
            <returns>An array of 6 bytes.</returns>
        </member>
        <member name="M:Zaber.PacketConverter.BuildDataPacket">
            <summary>
            Initialize the data structure and read the values from the buffer.
            </summary>
        </member>
        <member name="M:Zaber.PacketConverter.ReadStopwatch">
            <summary>
            Read the current time from the stop watch.
            </summary>
            <returns>The elapsed time in milliseconds.</returns>
            <remarks>This method is just to facilitate testing.</remarks>
        </member>
        <member name="T:Zaber.DataPacketEventArgs">
            <summary>
            Notification of a request or response from one of the devices in the chain.
            </summary>
        </member>
        <member name="M:Zaber.DataPacketEventArgs.#ctor(Zaber.DataPacket)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="data">See <see cref="P:Zaber.DataPacketEventArgs.DataPacket"/></param>
        </member>
        <member name="P:Zaber.DataPacketEventArgs.DataPacket">
            <summary>
            Gets the details of the device's request or response.
            </summary>
        </member>
        <member name="T:Zaber.TSeriesPort">
            <summary>
            Encapsulates serial port settings, and translates between the byte 
            streams and the DataPacket structure.
            </summary>
        </member>
        <member name="M:Zaber.TSeriesPort.#ctor(System.IO.Ports.SerialPort,Zaber.PacketConverter)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="serialPort">Serial port to communicate with.</param>
            <param name="packetConverter">Used to convert between the byte stream
            and the <see cref="T:Zaber.DataPacket"/> structure.</param>
        </member>
        <member name="P:Zaber.TSeriesPort.AreChecksumsSent">
            <summary>
            Flag that gets or sets whether checksums are sent with each text 
            message. If true, the checksum will be calculated with the
            Longitudinal Redundancy Check (LRC) algorithm.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.BaudRate">
            <summary>
            Gets or sets the baud rate of the underlying SerialPort.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.DelayMilliseconds">
            <summary>
            Get or set the delay period to use with <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            500 ms by default.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.IsAsciiMode">
            <summary>
            Flag that gets or sets whether the port is in ASCII mode.
            If it's not in ASCII mode, then all received data will be
            parsed as binary, 6-byte packets.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.IsOpen">
            <summary>
            Is the port open?
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.PacketConverter">
            <summary>
            Gets the packet converter used to convert between the byte stream 
            and the <see cref="T:Zaber.DataPacket"/> structure.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.PortName">
            <summary>
            Gets the port name that was last sent to <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>.
            </summary>
            <value>The port name that was last sent to <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>, or
            null if <see cref="M:Zaber.TSeriesPort.Open(System.String)"/> has not been called.</value>
        </member>
        <member name="P:Zaber.TSeriesPort.SendLock">
            <summary>
            Synchronization lock that controls when data packets are sent to
            the port.
            </summary>
            <remarks>If you lock this, then no data packets will be sent until
            you release it.
            </remarks>
        </member>
        <member name="P:Zaber.TSeriesPort.SerialPort">
            <summary>
            Gets the serial port to communicate with.
            </summary>
        </member>
        <member name="P:Zaber.TSeriesPort.SubscriberTimer">
            <summary>
            Gets or sets the timer that waits for an event subscriber to finish
            processing an event.
            </summary>
            <remarks>This object used to be used to make sure no handler
            subscribed to this class' events ran too long, as each was executed
            synchronously. It is now deprecated: All events handlers are now 
            called asynchronously, so it doesn't matter if they run long 
            sometimes. It is the responsibility of the subscribed method to not
            run long/be "badly behaved", not of the class which raises the 
            event.
            </remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.CancelDelayedPacket(Zaber.DataPacket)">
            <summary>
            Cancel a delayed packet that was requested by 
            <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.
            </summary>
            <param name="packet">The packet that was returned by 
            <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/>.</param>
            <returns>True if the packet was canceled before being sent, otherwise 
            false.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.Close">
            <summary>
            Close and release the serial port. This must be called to avoid
            locking the port when you are finished with it.
            </summary>
            <exception cref="T:System.InvalidOperationException">The port is not open.
            </exception>
            <exception cref="T:System.IO.IOException">The port does not exist, or a 
            sharing violation has occurred.</exception>
        </member>
        <member name="M:Zaber.TSeriesPort.Equals(System.Object)">
            <summary>
            Whether this object is equal to another.
            </summary>
            <param name="obj">The object to compare this one to.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.GetHashCode">
            <summary>
            Returns a calculated hash code for this object.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.GetPortNames">
            <summary>
            Get a list of all available serial ports.
            </summary>
            <returns>An array of port names, one of which should be passed to 
            <see cref="M:Zaber.TSeriesPort.Open(System.String)"/>. The names are sorted.</returns>
        </member>
        <member name="M:Zaber.TSeriesPort.Open(System.String)">
            <summary>
            Open the port to begin sending and receiving data. Be sure to call 
            <see cref="M:Zaber.TSeriesPort.Dispose"/> when you are finished with
            the port.
            </summary>
            <param name="portName">Should match one of the entries returned from
            <see cref="M:Zaber.TSeriesPort.GetPortNames"/></param>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.Byte,Zaber.Command)">
            <summary>
            Convenience method for commands that ignore the data value. 
            It sends 0 as the data value.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="T:Zaber.Command"/>.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.Byte,Zaber.Command,System.Int32,Zaber.Measurement)">
            <summary>
            Send a command to a device on the chain.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <param name="measurement">An optional measurement that the data 
            value was calculated from. May be null.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.String,Zaber.Measurement)">
            <summary>
            Send a text-mode command to a device on the chain.
            </summary>
            <param name="text">The full command to send to the device.</param>
            <param name="measurement">An optional measurement that the data 
            value was calculated from. May be null.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.TSeriesPort.Send(System.String)">
            <summary>
            Send a text-mode command to a device on the chain.
            </summary>
            <param name="text">The full command to send to the device.</param>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.IO.IOException">The port is in an invalid state.
            </exception>
        </member>
        <member name="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)">
            <summary>
            Send a command to a device on the chain after a delay.
            </summary>
            <param name="deviceNumber">See <see cref="P:Zaber.DataPacket.DeviceNumber"/>.</param>
            <param name="command">See <see cref="P:Zaber.DataPacket.Command"/>.</param>
            <param name="data">See <see cref="P:Zaber.DataPacket.Data"/>.</param>
            <returns>The data packet that will be sent. The data packet can be
            sent to <see cref="M:Zaber.TSeriesPort.CancelDelayedPacket(Zaber.DataPacket)"/> to stop it from being
            sent.</returns>
            <remarks>Wait for <see cref="P:Zaber.TSeriesPort.DelayMilliseconds"/> before sending
            the command. If you call this method several times, the commands
            get queued up and sent one at a time with a delay before each one.
            </remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.ReportInvalidPacket">
            <summary>
            Report that an invalid packet was received by raising the 
            <see cref="E:Zaber.TSeriesPort.ErrorReceived"/> event.
            </summary>
            <remarks>This can be called by any higher-level code that decides
            a packet was invalid. An example would be if the device number
            doesn't match any known devices.</remarks>
        </member>
        <member name="E:Zaber.TSeriesPort.DataPacketReceived">
             <summary>
             Raised when the port receives data back from the devices. When a complete
             response has been received, it's converted to a <see cref="T:Zaber.DataPacket"/> object and
             sent through this event.
             </summary>
             <example>
             Register an event handler and print any received data to the 
             output console.
             <code>
             private void MyForm_Load(object sender, EventArgs e)
             {
                 port.DataPacketReceived += 
                     new EventHandler&lt;DataPacketEventArgs&gt;(port_DataPacketReceived);
             }
            
             void port_DataPacketReceived(object sender, DataPacketEventArgs e)
             {
                 System.Console.Out.WriteLine(
                     "Device {0}: {1}({2})",
                     e.Data.DeviceNumber,
                     e.Data.Command,
                     e.Data.Data);
             }
             </code>
             </example>
             <remarks>
             <para>
             Be careful when handling this event, because it is usually raised 
             from a background thread. The simplest way to deal with that is not
             to register for this event at all. Use a <see cref="T:Zaber.Conversation"/>
             to coordinate requests and responses instead. It handles all the
             threading issues and just returns the response as the return
             value from <see cref="M:Zaber.Conversation.Request(Zaber.Command,System.Int32)"/>.
             </para>
             <para>If you do want to handle this event safely in your user 
             interface, read the first two sections of this article:
             http://weblogs.asp.net/justin_rogers/articles/126345.aspx
             It shows how to use <c>Control.InvokeRequired</c> and 
             <c>Control.BeginInvoke</c> to move execution back onto the UI
             thread from a background thread.
             </para>
             </remarks>
        </member>
        <member name="E:Zaber.TSeriesPort.DataPacketSent">
            <summary>
            Raised when the port sends data to the devices. 
            </summary>
            <remarks>
            Be careful when handling this event, because it is occasionally 
            raised from a background thread. See 
            <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/> for details. Some scenarios where
            it can be raised from a background thread are: executing scripts 
            and automatically adjusting message id mode.
            </remarks>
        </member>
        <member name="E:Zaber.TSeriesPort.ErrorReceived">
            <summary>
            Raised when the underlying port raises its own <c>ErrorReceived</c> 
            event, or when a partial data packet is received because some bytes
            have been dropped. The type of error is described by
            <see cref="P:Zaber.ZaberPortErrorReceivedEventArgs.ErrorType"/>.
            </summary>
            <remarks>
            Be careful when handling this event, because it is usually raised 
            from a background thread. See <see cref="E:Zaber.TSeriesPort.DataPacketReceived"/> for 
            details.
            </remarks>
        </member>
        <member name="M:Zaber.TSeriesPort.serialPort_ErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            Receive an error from the port.
            </summary>
            <param name="sender">The port</param>
            <param name="e">Details of the error.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.OnDelayedSendTimer(System.Object)">
            <summary>
            Handle the timer event for sending delayed requests.
            </summary>
            <param name="ignored">State object for the timer. Not used.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.WriteData(System.Byte[])">
            <summary>
            Write a stream of bytes to the port.
            </summary>
            <param name="data">The bytes to write</param>
            <remarks>This is protected so that it can be stubbed out during
            testing.</remarks>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.TimeoutException">The operation did not complete
            before the time-out period ended.</exception>
        </member>
        <member name="M:Zaber.TSeriesPort.EnableDelayedSendTimer(System.Boolean)">
            <summary>
            Turn the delayed send timer on or off.
            </summary>
            <remarks>The timer is used for the <see cref="M:Zaber.TSeriesPort.SendDelayed(System.Byte,Zaber.Command,System.Int32)"/> 
            method.</remarks>
            <param name="isEnabled">True to enable the timer, otherwise 
            false.</param>
        </member>
        <member name="M:Zaber.TSeriesPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Zaber.TSeriesPort.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <param name="isDisposing">True if the object is being disposed, and not
            garbage collected.</param>
        </member>
        <member name="T:Zaber.ZaberPortFacadeState">
            <summary>
            Lists the possible states that the <see cref="T:Zaber.ZaberPortFacade"/> can be in.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.Closed">
            <summary>
            Starting state. The only things available are a device 
            collection and conversation collection for all devices
            (device number 0).
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.QueryingDevices">
            <summary>
            COM port is open, but the devices are still being queried,
            still nothing available beyond device 0.
            </summary>
        </member>
        <member name="F:Zaber.ZaberPortFacadeState.Open">
            <summary>
            Everything is now available.
            </summary>
        </member>
    </members>
</doc>
