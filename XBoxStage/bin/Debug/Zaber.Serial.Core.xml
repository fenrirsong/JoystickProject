<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zaber.Serial.Core</name>
    </assembly>
    <members>
        <member name="T:Zaber.Serial.Core.AsciiCommand">
            <summary>
            A class to represent ASCII commands to be sent to %Zaber devices.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiCommand.AxisNumber">
            <summary>
            The number of the axis to which to send a command, or 0 to send a
            command to all axes.
            </summary>
            <remarks>
            Most commands must be sent to axis 0: only certain commands can
            be sent to particular axes. See the %Zaber ASCII Protocol Manual
            for more info.
            </remarks>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiCommand.Data">
            <summary>
            The data of the command to be sent to the device.
            </summary>
            <remarks>
            The data string may contain one or more command keywords,
            as well as extra data related to that command.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.#ctor">
            <summary>
            Create an empty command.
            </summary>
            <remarks>
            Data is set to the empty string instead of null by default, so
            this constructor can be used to quickly create the minimal ASCII
            command (<c>"/\n"</c>).
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.#ctor(System.String)">
            <summary>
            Parses the string "command" and creates a representation of that
            ASCII command.
            </summary>
            <param name="command">The string to be parsed into a Command
            object.</param>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.#ctor(Zaber.Serial.Core.ZaberAsciiAxis,System.String)">
            <summary>
            Create a new AsciiCommand for a specified ZaberAsciiAxis.
            </summary>
            <remarks>
            This constructor is an alias for <c>AsciiCommand(
            targetAxis.Parent.Address, targetAxis.Number, data)</c>. It is
            provided as a convenience.
            </remarks>
            <param name="targetAxis">The axis to which to send this command.
            </param>
            <param name="data">The data of the command to be sent, including
            command keywords and any command parameters.</param>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.#ctor(System.Byte,System.Int32,System.String)">
            <summary>
            Create a new AsciiCommand from a specified set of arguments.
            </summary>
            <param name="deviceAddress">The address of the device to which to
            send this command.</param>
            <param name="axisNumber">The number of the axis to which to send
            this command.</param>
            <param name="data">The data of the command to be sent, including
            command keywords and any command parameters.</param>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.Equals(Zaber.Serial.Core.Command)">
            <summary>
            Checks to see if this command is equal to another Command.
            </summary>
            <param name="command">The command to compare this one to.</param>
            <returns>True if the commands are equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.Equals(Zaber.Serial.Core.AsciiCommand)">
            <summary>
            Checks whether this AsciiCommand is equal to another one.
            </summary>
            <remarks>
            Equality is based on attribute equality, including mutable
            attributes. There is no guarantee that if a Command equals another
            at a certain time, it will always equal that other Command in the
            future.
            </remarks>
            <param name="command">The command to which to compare this one.
            </param>
            <returns>True if the commands are equal, false if they are
            inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.GetHashCode">
            <summary>
            Returns a hash code based off the command's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiCommand.ToString">
            <summary>
            Returns a human-readable representation of this command.
            </summary>
            <remarks>
            This method will return the "encoded" string format of the command
            which should be sent to the device. This is also the format
            expected by the AsciiCommand constructor which takes one argument,
            a string.
            </remarks>
            <returns>A string representing the command.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.AsciiReply">
            <summary>
            A class to parse and represent replies from %Zaber devices using the
            ASCII protocol.
            </summary>
        </member>
        <member name="T:Zaber.Serial.Core.AsciiReply.ReplyType">
            <summary>
            Represents the three different possible types of reply.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.ReplyType.Response">
            <summary>
            Sent as soon as a device has received a command and determined
            if it should respond.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.ReplyType.Info">
            <summary>
            Extra info from the device for testing/debugging/programming
            purposes.
            </summary>
            <remarks>
            Info is designed to be read by the user and ignored by
            software. One or more info messages can follow a reply or
            alert message. The common occurrence of info messages is in
            reply to the "/help" command.
            </remarks>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.ReplyType.Alert">
            <summary>
            Sent when a motion command has completed if a device has the
            "comm.alert" setting set to 1.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.MessageType">
            <summary>
            The message type of the reply. Either '@', '#', or '!', for
            "response", "info", or "alert", respectively.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.AxisNumber">
            <summary>
            The axis from which the reply came, or 0 if the reply came from
            a whole device.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.Rejected">
            <summary>
            Whether the device rejected the last command. 
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.Busy">
            <summary>
            Whether the device is moving or not.
            </summary>
            <remarks>
            A device will always be busy immediately after being given a
            "move" command. This attribute is especially useful for polling a
            device to see whether it is ready to be given another command.
            </remarks>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.WarningFlags">
            <summary>
            A two-letter code if something is wrong, or "--" if everything is
            OK.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.AsciiReply.ResponseData">
            <summary>
            The "meat" of a response. Can contain many different things: see
            the command reference for your chosen test to see what to expect.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.#ctor">
            <summary>
            Create a blank AsciiReply.
            </summary>
            <remarks>
            Most of the time, you will want to use the one-argument AsciiReply
            constructor, which will parse a reply string and turn it into a
            populated AsciiReply object.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.#ctor(System.String)">
            <summary>
            Create a new AsciiReply parsed from a string.
            </summary>
            <remarks>
            It is rare that you will need to construct an AsciiReply yourself:
            ZaberPort packages up received strings as AsciiReplies
            automatically. This constructor parses a reply and builds a
            matching AsciiReply object.
            </remarks>
            <param name="reply">The string to be parsed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reply"/>
            is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="reply"/>
            could not be parsed.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.#ctor(System.Char,System.Byte,System.Int32,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            A constructor for making AsciiReplies by explicitly settings each
            attribute.
            </summary>
            <param name="messageType">The type of the reply.</param>
            <param name="deviceAddress">The address of the device which sent
            the reply.</param>
            <param name="axisNumber">The number of the axis which sent the 
            reply.</param>
            <param name="rejected">Whether a command was rejected by the
            device.</param>
            <param name="busy">Whether the device is busy.</param>
            <param name="warningFlags">A flag warning that something may be
            wrong with the device or its operation.</param>
            <param name="responseData">The data associated with a reply.
            </param>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.Equals(Zaber.Serial.Core.Reply)">
            <summary>
            Checks to see if this reply is equal to another Reply.
            </summary>
            <param name="reply">The reply to compare this one to.</param>
            <returns>True if the replies are equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.Equals(Zaber.Serial.Core.AsciiReply)">
            <summary>
            Reports whether an AsciiReply is equal to another AsciiReply.
            </summary>
            <remarks>Equality is defined as having all of the same attribute
            values. If any of the MessageType, DeviceAddress, AxisNumber, etc.
            are inequal, this method returns false.</remarks>
            <param name="reply">The AsciiReply to which to compare this
            AsciiReply.</param>
            <returns>true if equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.GetHashCode">
            <summary>
            Returns a hash code based off the reply's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.AsciiReply.ToString">
            <summary>
            Returns a human-readable representation of this reply.
            </summary>
            <remarks>
            This method will return a string which is either identical or very
            similar to the original reply string. 
            </remarks>
            <returns>A string representing the reply.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.BinaryCommand">
            <summary>
            A class for representing and encoding 6-byte binary commands.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.BinaryCommand.CommandNumber">
            <summary>
            The number of the command to send.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.BinaryCommand.Data">
            <summary>
            The data value to send in the command.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.#ctor">
            <summary>
            Create a blank BinaryCommand.
            </summary>
            <remarks>
            Though this constructor should be thought of as creating a blank
            command, integers must be set to something by default, which is
            usually 0. This is dangerous, as command number 0 is the "reset"
            command. Therefore, the default command number is instead 54, the
            "get status" command.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.#ctor(System.Byte[])">
            <summary>
            Create a BinaryCommand from 6 bytes in the proper form to be sent
            to a device using the binary protocol.
            </summary>
            <param name="command">A byte array, the first six bytes of which
            will be converted into a BinaryCommand object.</param>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.#ctor(System.Byte,System.Byte,System.Int32)">
            <summary>
            The recommended constructor, creating a BinaryCommand from user-
            specified parameters.
            </summary>
            <param name="deviceAddress">The number of the target device.
            </param>
            <param name="commandNumber">The number of the command to send.
            </param>
            <param name="data">The data to send with the command.</param>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.Equals(Zaber.Serial.Core.Command)">
            <summary>
            Checks to see if this command is equal to another Command.
            </summary>
            <param name="command">The command to compare this one to.</param>
            <returns>True if the commands are equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.Equals(Zaber.Serial.Core.BinaryCommand)">
            <summary>
            Reports whether a BinaryCommand is equal to this one.
            </summary>
            <remarks>Equality is defined as having all of the same attribute
            values. If any of the objects' attributes are inequal, this method
            returns false.</remarks>
            <param name="command">The BinaryCommand to which to compare this
            BinaryCommand.</param>
            <returns>true if equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.GetHashCode">
            <summary>
            Returns a hash code based off the command's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.ToString">
            <summary>
            Returns a human-readable representation of this command.
            </summary>
            <returns>A string representing the command.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryCommand.ToByteArray">
            <summary>
            Encodes the command represented by this object into an array of
            bytes in the form specified by the %Zaber Binary Protocol Manual.
            </summary>
            <returns>A 6-byte array to be transmitted to a device.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.BinaryReply">
            <summary>
            A class for representing replies from devices using the binary 
            protocol.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.BinaryReply.CommandNumber">
            <summary>
            The number of the command which caused the device to reply.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.BinaryReply.Data">
            <summary>
            Data returned with the reply.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.#ctor">
            <summary>
            Create an empty reply object.
            </summary>
            <remarks>
            <c>int</c>s need to be set to something by default. This is
            typically 0. In Zaber's binary protocol, 0 is the "reset" command.
            To avoid accidental resetting a device or giving the impression a
            device has reset, the CommandNumber is set by default instead to
            54, the more-harmless "get status" command. 
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.#ctor(System.Byte[])">
            <summary>
            Parses a byte array and creates a matching BinaryReply.
            </summary>
            <remarks>
            ZaberPort automatically calls this constructor to parse a reply
            received from the port before returning the Reply from Receive().
            For this reason, it is rare that a user would need to use this
            constructor directly, or any BinaryReply constructor for that
            matter.
            </remarks>
            <param name="reply">The byte array to be parsed into a BinaryReply
            object.</param>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.#ctor(System.Byte,System.Byte,System.Int32)">
            <summary>
            Create a new BinaryReply from a set of parameters.
            </summary>
            <remarks>
            This constructor is mostly useful for testing purposes, or to
            more easily compare a reply with an expected response.
            </remarks>
            <param name="deviceAddress">The number of the device this reply
            "came from".</param>
            <param name="commandNumber">The number of the command that caused
            the "device" to respond.</param>
            <param name="data">The data to be sent along with the command.</param>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.Equals(Zaber.Serial.Core.Reply)">
            <summary>
            Checks to see if this reply is equal to another Reply.
            </summary>
            <param name="reply">The reply to compare this one to.</param>
            <returns>True if the replies are equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.Equals(Zaber.Serial.Core.BinaryReply)">
            <summary>
            Reports whether this BinaryReply is equal to another BinaryReply.
            </summary>
            <param name="reply">The reply to be compared to this one.</param>
            <returns>True if the replies are equal, false if inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.GetHashCode">
            <summary>
            Returns a hash code based off the reply's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.BinaryReply.ToString">
            <summary>
            Returns a human-readable representation of this reply.
            </summary>
            <returns>A string representing the reply.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.Command">
            <summary>
            An abstract class for commands of all forms to inherit from.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.Command.DeviceAddress">
            <summary>
            The address of the device to which to send a command, or 0 to send
            a command to all devices on the chain.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.Command.#ctor">
            <summary>
            Creates a new instance of the Command class.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.Command.GetHashCode">
            <summary>
            Returns a hash code based off the command's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Command.ToString">
            <summary>
            Returns a human-readable representation of this command.
            </summary>
            <returns>A string representing the command.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Command.Equals(System.Object)">
            <summary>
            Tests the equality of any object against this command.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>True if the object and this command are equal,
            false if they are inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Command.Equals(Zaber.Serial.Core.Command)">
            <summary>
            Checks to see if this command is equal to another Command.
            </summary>
            <param name="command">The command to compare this one to.</param>
            <returns>True if the commands are equal, false if inequal.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.IZaberAxis">
            <summary>
            An interface to represent an individual %Zaber device's axis.
            </summary>
            <remarks>
            Classes implementing this interface are intended only for basic,
            one-axis-at-a-time use cases. If you need to synchronize devices,
            move more than one axis at a time, or do any other sort of
            asynchronous I/O, use a class which implements IZaberPort.
            
            Classes implementing IZaberAxis make a few assumptions, the most 
            fundamental assumption being that all interaction with devices is done
            exclusively using the commands in this interface. From this assumption,
            it makes the second assumption that all input read immediately after a
            write is the anticipated response. Therefore, if you intend to mix and
            match calls to things like ZaberAsciiAxis.Home() with calls to
            ZaberAsciiPort.Write(), it is essential to follow every call to
            Write() with a Read(), or the input buffer will become misaligned. 
            </remarks>
        </member>
        <member name="P:Zaber.Serial.Core.IZaberAxis.Port">
            <summary>
            The parent port of the axis.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.Home">
            <summary>
            Homes the device.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.MoveAbsolute(System.Int32)">
            <summary>
            Moves the device to the specified position.
            </summary>
            <param name="position">The position in microsteps.</param>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.MoveRelative(System.Int32)">
            <summary>
            Moves the device by a certain distance.
            </summary>
            <param name="distance">The distance in microsteps.</param>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.MoveVelocity(System.Int32)">
            <summary>
            Moves the device at a certain speed.
            </summary>
            <remarks>
            This command differs from the other two move commands in that it
            returns immediately instead of waiting for the device to finish
            its movement and become idle. For this reason, the Stop() method
            is also provided.
            </remarks>
            <param name="speed">The speed to move at.</param>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.Stop">
            <summary>
            Stops the device.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.IsBusy">
            <summary>
            Polls the device to determine whether it is currently moving.
            </summary>
            <returns>true if the device is busy; false if it is idle.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.GetPosition">
            <summary>
            Gets the position of the axis, in microsteps.
            </summary>
            <returns>The axis position.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberAxis.PollUntilIdle">
            <summary>
            Blocks while Polling the device at a regular interval until it
            reports itself as idle.
            </summary>
        </member>
        <member name="T:Zaber.Serial.Core.IZaberPort">
            <summary>
            An interface for communicating with %Zaber devices over a serial port.
            </summary>
            <remarks>
            Objects implementing IZaberPort can be thought of as extensions which 
            simplify the built-in System.IO.Ports.SerialPort class. They are
            configured specifically for communicating with %Zaber devices. They
            are designed to interact primarily with "Command" and "Reply" objects
            instead of raw strings and byte arrays, though one can work with this
            class entirely in terms of "string" and "byte[]" if one so wishes.
            </remarks>
        </member>
        <member name="P:Zaber.Serial.Core.IZaberPort.PortName">
            <summary>
            The name of the port.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.IZaberPort.IsOpen">
            <summary>
            Whether the port is open.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.IZaberPort.ReadTimeout">
            <summary>
            The number of milliseconds before a time-out occurrs when a read
            operation does not finish.
            </summary>
            <remarks>
            This property allows you to set the read time-out value.
            The time-out can be set to any value greater than zero, or set to
            -1, in which case no time-out occurrs. -1 is the default.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <remarks>
            This method closes and re-opens the port if the port is already
            open.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port, or the current process or another process on the system
            already has the specified COM port open.</exception>
            <exception cref="T:System.IO.IOException">An attempt to open the port failed.
            Often this is caused by a port name being incorrect, or a port
            being disconnected.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberPort.Close">
            <summary>
            Closes the underlying SerialPort object's connection.
            </summary>
            <remarks>
            This method will only try to close the port if it is open.
            Attempting to close an already-closed port will do nothing.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberPort.Drain">
            <summary>
            Purges all input waiting on the input buffer, and attemps to drain
            all incoming data before returning.
            </summary>
            <remarks>
            This method will block until there is a 100ms period of silence in
            serial communication, guaranteeing that the next time Read() is
            called, it will receive a full message sent by the device some
            time after the call to Drain().
            </remarks>
            <remarks>
            This method is intended to be used when many commands have been
            sent without receiving any replies. If the user must suddenly read
            a reply to a certain command and has not been receiving replies
            otherwise, this method will allow them to immediately read the
            next incoming reply.
            </remarks>
            <remarks>
            Do not use this method in any setting where a serial line may
            never be quiet for over 100ms, as it may block forever. Some
            examples of such a setup are multiple devices chained together
            being polled constantly for position, or at least one device
            connected with move tracking enabled.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.IZaberPort.FindAxes">
            <summary>
            Queries the port to find all connected axes.
            </summary>
            <remarks>
            This method will only find axes which respond at the specified
            baud rate and protocol.
            </remarks>
            <returns>A list of connected axes.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.Reply">
            <summary>
            An abstract class for replies of all forms to inherit from.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.Reply.DeviceAddress">
            <summary>
            The address of the device from which the reply came.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.Reply.#ctor">
            <summary>
            Creates a new instance of the Reply class.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.Reply.GetHashCode">
            <summary>
            Returns a hash code based off the reply's attributes.
            </summary>
            <remarks>
            The hash code returned by this function depends on all of the
            attributes of the object, including the mutable ones. This means
            that when using this class in a HashMap or similar structure, it
            should be considered immutable, or else it will be lost upon being
            changed.</remarks>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Reply.ToString">
            <summary>
            Returns a human-readable representation of this reply.
            </summary>
            <returns>A string representing the reply.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Reply.Equals(System.Object)">
            <summary>
            Tests the equality of any object against this reply.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>True if the object and this reply are equal,
            false if they are inequal.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.Reply.Equals(Zaber.Serial.Core.Reply)">
            <summary>
            Checks to see if this reply is equal to another Reply.
            </summary>
            <param name="reply">The reply to compare this one to.</param>
            <returns>True if the replies are equal, false if inequal.</returns>
        </member>
        <member name="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">
            <summary>
            Thrown when an axis receives a reply from a device or axis
            which is not itself, or when the reply is of an unexpected type.
            </summary>
            <remarks>
            This exception is usually thrown when the input buffer has become
            shifted or misaligned. Generally this is caused by a Write() not
            being followed by a Read() somewhere when dealing with a port
            object directly.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.UnexpectedReplyReceivedException.#ctor">
            <summary>
            Initializes a new instance of the 
            UnexpectedReplyReceivedException class.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.UnexpectedReplyReceivedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            UnexpectedReplyReceivedException class with a specified error
            message.
            </summary>
            <param name="message">The message that describes the error.
            </param>
        </member>
        <member name="M:Zaber.Serial.Core.UnexpectedReplyReceivedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the 
            UnexpectedReplyReceivedException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the
            serialized object data about the exception being thrown.
            </param>
            <param name="context">The StreamingContext that contains
            contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Zaber.Serial.Core.ZaberAsciiAxis">
            <summary>
            A class to model an individual axis of an ASCII device.
            </summary>
            <remarks>
            This class should be the de-facto way to interact with %Zaber devices
            using the ASCII protocol (not ZaberAsciiDevice).
            </remarks>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiAxis.Port">
            <summary>
            The parent port of the axis.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberAsciiAxis.ParentAddress">
            <summary>
            The address of the parent device.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberAsciiAxis.Number">
            <summary>
            The number of this axis.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.#ctor(Zaber.Serial.Core.ZaberAsciiPort,System.Byte,System.Int32)">
            <summary>
            Creates a new instance of the ZaberAsciiAxis class.
            </summary>
            <remarks>
            This three-argument constructor will first check in the device
            list of the <paramref name="port"/> specified to see if a device
            with the specified address exists. If so, the constructor adds
            this axis to that device's list of axes. If not, it creates an
            appropriate device object, adds it to the port's list, and then
            registers itself with that device.
            </remarks>
            <remarks>
            No matter what, the result of this constructor will be that the
            <paramref name="port"/> will have a device with address 
            <paramref name="deviceAddress"/>, which will have an axis (this
            newly-created object) with number <paramref name="axisNumber"/>.
            </remarks>
            <param name="port">The port this axis is connected to.</param>
            <param name="deviceAddress">The address of the parent device.</param>
            <param name="axisNumber">The axis number.</param>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.#ctor(Zaber.Serial.Core.ZaberAsciiDevice,System.Int32)">
            <summary>
            Create a new instance of the ZaberAsciiAxis class.
            </summary>
            <param name="parent">The parent device.</param>
            <param name="number">The axis number.</param>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.Home">
            <summary>
            Homes the device.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.MoveAbsolute(System.Int32)">
            <summary>
            Moves the device to the specified position.
            </summary>
            <param name="position">The position in microsteps.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.MoveRelative(System.Int32)">
            <summary>
            Moves the device by a certain distance.
            </summary>
            <param name="distance">The distance in microsteps.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.MoveVelocity(System.Int32)">
            <summary>
            Moves the device at a certain speed.
            </summary>
            <remarks>
            This command differs from the other two move commands in that it
            returns immediately instead of waiting for the device to finish
            its movement and become idle. For this reason, the Stop() method
            is also provided.
            Note that if you have Alert messages enabled on your device, this
            command could result in unconsumed alerts waiting to be received.
            Call Port.Drain() before issuing the next command if this causes problems.
            </remarks>
            <param name="speed">The speed to move at.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.Stop">
            <summary>
            Stops the device.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.IsBusy">
            <summary>
            Polls the device to determine whether it is currently moving.
            </summary>
            <returns>true if the device is busy; false if it is idle.</returns>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.GetPosition">
            <summary>
            Gets the position of the axis, in microsteps.
            </summary>
            <returns>The axis position.</returns>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiAxis.PollUntilIdle">
            <summary>
            Blocks while Polling the device at a regular interval until it
            reports itself as idle.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="T:Zaber.Serial.Core.ZaberAsciiDevice">
            <summary>
            A class to represent a single- or multi-axis %Zaber device using the
            ASCII protocol.
            </summary>
            <remarks>
            <see cref="T:Zaber.Serial.Core.ZaberAsciiAxis"/> is the intended class for controlling
            devices using the ASCII protocol. This encourages thinking of devices
            in terms of axes instead of whole devices, and helps to unify the
            ASCII and binary halves of the library.
            
            Consider using this class to control a multi-axis device like so:
            <code>
            var device = new ZaberAsciiDevice(myPort, 1);
            
            device.GetAxis(1).Home();
            device.GetAxis(2).MoveRelative(1000);
            device.GetAxis(1).MoveAbsolute(2000);
            </code>
            </remarks>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiDevice.Port">
            <summary>
            The parent port of the device.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberAsciiDevice.Address">
            <summary>
            The device address.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiDevice.#ctor(Zaber.Serial.Core.ZaberAsciiPort,System.Byte)">
            <summary>
            Create a new instance of the ZaberAsciiDevice class.
            </summary>
            <param name="port">The port the device is connected to.</param>
            <param name="address">The device address.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="port"/> is
            null.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiDevice.GetAxis(System.Int32)">
            <summary>
            Get the axis with the specified number.
            </summary>
            <remarks>
            This method will create the axis specified and assume that the
            device does indeed have such an axis. It is up to you to only make
            axes which actually exist on the device.
            
            For a method which will detect the number of axes a device has,
            see ZaberAsciiPort.FindAxes(), or send the "get system.axiscount"
            ASCII command directly to a device.
            </remarks>
            <param name="number">The number of the axis.</param>
            <returns>A matching ZaberAsciiAxis instance.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="number"/> is
            not between 1 and 9.</exception>
        </member>
        <member name="T:Zaber.Serial.Core.ZaberAsciiPort">
            <summary>
            Represents a port connected to devices using the ASCII protocol.
            </summary>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberAsciiPort.port">
            <summary>
            The underlying SerialPort object.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiPort.PortName">
            <summary>
            The name of the port.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiPort.IsOpen">
            <summary>
            Whether the port is open.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiPort.ReadTimeout">
            <summary>
            The number of milliseconds before a time-out occurrs when a read
            operation does not finish.
            </summary>
            <remarks>
            This property allows you to set the read time-out value.
            The time-out can be set to any value greater than zero, or set to
            -1, in which case no time-out occurrs. -1 is the default.
            </remarks>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberAsciiPort.InfiniteTimeout">
            <summary>
            Indicates that no time-out should occur.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberAsciiPort.BaudRate">
            <summary>
            Gets the serial baud rate.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZaberAsciiPort class using the
            specified port name.
            </summary>
            <param name="portName">The port to use (for example, COM1).</param>
            <exception cref="T:System.IO.IOException">The specified port could not be
            found or opened.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ZaberAsciiPort class using the
            specified port name and baud rate.
            </summary>
            <param name="portName">The port to use (for example, COM1).</param>
            <param name="baudRate">The baud rate.</param>
            <exception cref="T:System.ArgumentException">portName is either null, or 
            does not begin with "COM".</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <remarks>
            This method closes and re-opens the port if the port is already
            open.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port, or the current process or another process on the system
            already has the specified COM port open.</exception>
            <exception cref="T:System.IO.IOException">An attempt to open the port failed.
            Often this is caused by a port name being incorrect, or a port
            being disconnected.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Close">
            <summary>
            Closes the underlying SerialPort object's connection.
            </summary>
            <remarks>
            This method will only try to close the port if it is open.
            Attempting to close an already-closed port will do nothing.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Drain">
            <summary>
            Purges all input waiting on the input buffer, and attemps to drain
            all incoming data before returning.
            </summary>
            <remarks>
            This method will block until there is a 100ms period of silence in
            serial communication, guaranteeing that the next time Read() is
            called, it will receive a full message sent by the device some
            time after the call to Drain().
            </remarks>
            <remarks>
            This method is intended to be used when many commands have been
            sent without receiving any replies. If the user must suddenly read
            a reply to a certain command and has not been receiving replies
            otherwise, this method will allow them to immediately read the
            next incoming reply.
            </remarks>
            <remarks>
            Do not use this method in any setting where a serial line may
            never be quiet for over 100ms, as it may block forever. Some
            examples of such a setup are multiple devices chained together
            being polled constantly for position, or at least one device
            connected with move tracking enabled.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Read">
            <summary>
            Reads a reply from a device.
            </summary>
            <returns>The reply read.</returns>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.TimeoutException">No bytes were available to
            read.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Write(Zaber.Serial.Core.AsciiCommand)">
            <summary>
            Sends a command to the port's devices.
            </summary>
            <param name="command">The command to be sent.</param>
            <exception cref="T:System.ArgumentNullException">The 
            <paramref name="command"/> passed is null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Write(System.String)">
            <summary>
            Writes a command string to the port.
            </summary>
            <remarks>
            This method checks whether the <paramref name="command"/> passed
            starts with '/' and ends with '\\n', and adds them if they are
            absent.
            </remarks>
            <param name="command">A string to be sent.</param>
            <exception cref="T:System.ArgumentNullException">The 
            <paramref name="command"/> passed is null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.FindAxes">
            <summary>
            Queries the port to find all connected axes.
            </summary>
            <remarks>
            This method will only find axes which respond at the specified
            baud rate and protocol.
            </remarks>
            <returns>A list of connected axes.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.FindDevices">
            <summary>
            Queries the port to find all connected devices.
            </summary>
            <remarks>
            This method will only find devices which respond at the specified
            baud rate and protocol.
            </remarks>
            <remarks>
            In general, it is recommended to use FindAxes() to get all of the
            axes connected to a port. There are plenty of good reasons for
            getting a list of devices instead, but we encourage sending 
            movement commands to individual axes, even if the device has only
            one axis. In any case, communication with devices should be done
            in terms of the device's axes, which can be done from
            FindDevices() like so:
            <code>
            // Home all connected devices' first axes.
            foreach (ZaberAsciiDevice device in port.FindDevices())
            {
                device.GetAxis(1).Home();
            }
            </code>
            </remarks>
            <returns>A list of connected devices.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberAsciiPort.Dispose">
            <summary>
            Releases the resources used by the underlying SerialPort object.
            </summary>
        </member>
        <member name="T:Zaber.Serial.Core.ZaberBinaryDevice">
            <summary>
            Represents an axis of a device running in the binary protocol.
            </summary>
            <remarks>
            The binary protocol makes no distinction between devices and axes:
            every axis is a device in the binary protocol. Therefore this class
            is named ZaberBinaryDevice rather than ZaberBinaryAxis to eliminate
            confusion about this fact, despite implementing the IZaberAxis 
            interface.
            </remarks>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberBinaryDevice.Port">
            <summary>
            The parent port of the axis.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberBinaryDevice.Number">
            <summary>
            The device number, 0-255.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.#ctor(Zaber.Serial.Core.ZaberBinaryPort,System.Byte)">
            <summary>
            Create a new instance of the ZaberBinaryDevice class to model a
            %Zaber device connected to the port specified by 
            <paramref name="port"/> using the binary protocol.
            </summary>
            <param name="port">The port to which this device is connected.</param>
            <param name="number">The number of this device.</param>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.Home">
            <summary>
            Homes the device.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.MoveAbsolute(System.Int32)">
            <summary>
            Moves the device to the specified position.
            </summary>
            <param name="position">The position in microsteps.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.MoveRelative(System.Int32)">
            <summary>
            Moves the device by a certain distance.
            </summary>
            <param name="distance">The distance in microsteps.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.MoveVelocity(System.Int32)">
            <summary>
            Moves the device at a certain speed.
            </summary>
            <remarks>
            This command differs from the other two move commands in that it
            returns immediately instead of waiting for the device to finish
            its movement and become idle. For this reason, the Stop() method
            is also provided.
            </remarks>
            <param name="speed">The speed to move at.</param>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.Stop">
            <summary>
            Stops the device.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.IsBusy">
            <summary>
            Polls the device to determine whether it is currently moving.
            </summary>
            <returns>true if the device is busy; false if it is idle.</returns>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.GetPosition">
            <summary>
            Gets the position of the axis, in microsteps.
            </summary>
            <returns>The axis position.</returns>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryDevice.PollUntilIdle">
            <summary>
            Blocks while Polling the device at a regular interval until it
            reports itself as idle.
            </summary>
            <exception cref="T:Zaber.Serial.Core.UnexpectedReplyReceivedException">An unexpected
            reply was read from the serial port.</exception>
        </member>
        <member name="T:Zaber.Serial.Core.ZaberBinaryPort">
            <summary>
            Represents a port connected to devices using the binary protocol.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberBinaryPort.PortName">
            <summary>
            The name of the port.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberBinaryPort.IsOpen">
            <summary>
            Whether the port is open.
            </summary>
        </member>
        <member name="P:Zaber.Serial.Core.ZaberBinaryPort.ReadTimeout">
            <summary>
            The number of milliseconds before a time-out occurrs when a read
            operation does not finish.
            </summary>
            <remarks>
            This property allows you to set the read time-out value.
            The time-out can be set to any value greater than zero, or set to
            -1, in which case no time-out occurrs. -1 is the default.
            </remarks>
        </member>
        <member name="F:Zaber.Serial.Core.ZaberBinaryPort.InfiniteTimeout">
            <summary>
            Indicates that no time-out should occur.
            </summary>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZaberBinaryPort class using the
            specified port name.
            </summary>
            <param name="portName">The port to use (for example, COM1).</param>
            <exception cref="T:System.IO.IOException">The specified port could not be
            found or opened.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <remarks>
            This method closes and re-opens the port if the port is already
            open.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to
            the port, or the current process or another process on the system
            already has the specified COM port open.</exception>
            <exception cref="T:System.IO.IOException">An attempt to open the port failed.
            Often this is caused by a port name being incorrect, or a port
            being disconnected.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Close">
            <summary>
            Closes the underlying SerialPort object's connection.
            </summary>
            <remarks>
            This method will only try to close the port if it is open.
            Attempting to close an already-closed port will do nothing.
            </remarks>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Drain">
            <summary>
            Purges all input waiting on the input buffer, and attemps to drain
            all incoming data before returning.
            </summary>
            <remarks>
            This method will block until there is a 100ms period of silence in
            serial communication, guaranteeing that the next time Read() is
            called, it will receive a full message sent by the device some
            time after the call to Drain().
            </remarks>
            <remarks>
            This method is intended to be used when many commands have been
            sent without receiving any replies. If the user must suddenly read
            a reply to a certain command and has not been receiving replies
            otherwise, this method will allow them to immediately read the
            next incoming reply.
            </remarks>
            <remarks>
            Do not use this method in any setting where a serial line may
            never be quiet for over 100ms, as it may block forever. Some
            examples of such a setup are multiple devices chained together
            being polled constantly for position, or at least one device
            connected with move tracking enabled.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.FindAxes">
            <summary>
            Queries the port to find all connected axes.
            </summary>
            <remarks>
            This method will only find axes which respond at the specified
            baud rate and protocol.
            </remarks>
            <returns>A list of connected axes.</returns>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Write(Zaber.Serial.Core.BinaryCommand)">
            <summary>
            Sends a command to the port's devices.
            </summary>
            <param name="command">The command to be sent.</param>
            <exception cref="T:System.ArgumentNullException">The 
            <paramref name="command"/> passed is null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Write(System.Byte[])">
            <summary>
            Writes an array of bytes to the port.
            </summary>
            <remarks>
            This method will always write the first six bytes of 
            <paramref name="command"/> to the port. In order to behave as
            intended, the last four bytes must encode the desired data in a
            little-endian representation, as specified by %Zaber's Binary
            Protocol Manual.
            </remarks>
            <param name="command">An array of "raw" bytes to be sent.</param>
            <exception cref="T:System.ArgumentNullException">The 
            <paramref name="command"/> passed is null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Read">
            <summary>
            Reads a reply from a device.
            </summary>
            <returns>The reply read.</returns>
            <exception cref="T:System.InvalidOperationException">The specified port is
            not open.</exception>
            <exception cref="T:System.TimeoutException">No bytes were available to
            read.</exception>
        </member>
        <member name="M:Zaber.Serial.Core.ZaberBinaryPort.Dispose">
            <summary>
            Releases the resources used by the underlying SerialPort object.
            </summary>
        </member>
    </members>
</doc>
